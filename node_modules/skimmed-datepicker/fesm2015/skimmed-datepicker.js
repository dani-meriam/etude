import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, LOCALE_ID, Output, ElementRef, NgZone, HostBinding, Directive, NgModule } from '@angular/core';
import { FormStyle, getLocaleDayNames, TranslationWidth, WeekDay, CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} date
 * @return {?}
 */
function isValidDate(date) {
    return !isNaN(date.getTime());
}
/**
 * @param {?} date
 * @return {?}
 */
function startOfDay(date) {
    const /** @type {?} */ d = new Date(/** @type {?} */ (date));
    d.setHours(0, 0, 0, 0);
    return d;
}
/**
 * @param {?} date
 * @return {?}
 */
function startOfMonth(date) {
    const /** @type {?} */ d = new Date(/** @type {?} */ (date));
    d.setHours(0, 0, 0, 0);
    d.setDate(1);
    return d;
}
/**
 * @param {?} date
 * @return {?}
 */
function startOfYear(date) {
    const /** @type {?} */ d = new Date(/** @type {?} */ (date));
    d.setHours(0, 0, 0, 0);
    d.setMonth(0, 1);
    return d;
}
/**
 * @param {?} panRatio
 * @return {?}
 */
function createEaseOut(panRatio) {
    const /** @type {?} */ a = (panRatio - 2) / Math.pow(panRatio, 3);
    const /** @type {?} */ b = (3 - 2 * panRatio) / Math.pow(panRatio, 2);
    return function easeOut(x) {
        return (x >= panRatio) ? 1 : ((a * x + b) * x + 1) * x;
    };
}
/**
 * @return {?}
 */
function noop() {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
const ViewMode = {
    Days: 'days',
    Months: 'months',
    Years: 'years',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DatepickerComponent {
    /**
     * @param {?} cd
     * @param {?} locale
     */
    constructor(cd, locale) {
        this.cd = cd;
        this.locale = locale;
        this.dateChange = new EventEmitter();
        this.dayFormat = 'd';
        this.monthFormat = 'MMM';
        this.yearFormat = 'y';
        this.headingFormat = 'MMMM y';
        this.weekStart = WeekDay.Monday;
        this.view = ViewMode.Days;
        this.ViewMode = ViewMode;
        this.onChange = noop;
        this.onTouched = noop;
    }
    /**
     * @param {?} dirtyDate
     * @return {?}
     */
    set date(dirtyDate) {
        if (dirtyDate == null) {
            this.selectedTimestamp = undefined;
            return;
        }
        const /** @type {?} */ date = startOfDay(dirtyDate);
        if (date.getTime() !== this.selectedTimestamp) {
            this.selectedTimestamp = isValidDate(date) ? date.getTime() : undefined;
            if (typeof this.selectedTimestamp !== 'undefined') {
                this.initialTimestamp = this.selectedTimestamp;
                this.view = ViewMode.Days;
            }
        }
    }
    /**
     * @param {?} dirtyDate
     * @return {?}
     */
    set min(dirtyDate) {
        const /** @type {?} */ date = startOfDay(dirtyDate);
        this.minTimestamp = isValidDate(date) ? date.valueOf() : undefined;
    }
    /**
     * @param {?} dirtyDate
     * @return {?}
     */
    set max(dirtyDate) {
        const /** @type {?} */ date = startOfDay(dirtyDate);
        this.maxTimestamp = isValidDate(date) ? date.valueOf() : undefined;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('weekDayLabels' in changes) {
            this.weekDayLabels = this.weekDayLabels || getLocaleDayNames(this.locale, FormStyle.Standalone, TranslationWidth.Abbreviated);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currentTimestamp = startOfDay(new Date()).getTime();
        this.initialTimestamp = this.selectedTimestamp || this.currentTimestamp;
        this.weekDayLabels = this.weekDayLabels || getLocaleDayNames(this.locale, FormStyle.Standalone, TranslationWidth.Abbreviated);
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    selectDay(timestamp) {
        console.log(timestamp);
        this.selectedTimestamp = timestamp;
        const /** @type {?} */ date = (typeof timestamp !== 'undefined') ? new Date(timestamp) : undefined;
        this.onChange(date);
        this.dateChange.emit(date);
    }
    /**
     * @param {?} timestamp
     * @param {?} view
     * @param {?} direction
     * @return {?}
     */
    switchView(timestamp, view, direction) {
        this.zoomDirection = direction;
        setTimeout(() => {
            this.initialTimestamp = timestamp;
            this.view = view;
            this.cd.markForCheck();
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        this.date = obj;
        this.cd.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
        // TODO implement
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        // TODO implement
        this.cd.markForCheck();
    }
}
DatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'skm-datepicker',
                template: `<div class="skm-datepicker" [ngSwitch]="view">
  <skm-view
    *ngSwitchCase="ViewMode.Days"
    skmDaysStrategy
    class="skm-datepicker-view skm-datepicker-days-view"
    [zoomDirection]="zoomDirection"
    [initialTimestamp]="initialTimestamp"

    [currentTimestamp]="currentTimestamp"
    [selectedTimestamp]="selectedTimestamp"
    [minTimestamp]="minTimestamp"
    [maxTimestamp]="maxTimestamp"

    [deselectEnabled]="deselectEnabled"

    [headingFormat]="headingFormat"
    [weekStart]="weekStart"
    [weekDayLabels]="weekDayLabels"
    [itemFormat]="dayFormat"
    [itemLabels]="dayLabels"

    (headerClick)="switchView($event, ViewMode.Months, 'out')"
    (itemChange)="selectDay($event)"
  ></skm-view>
  <skm-view
    *ngSwitchCase="ViewMode.Months"
    skmMonthsStrategy
    class="skm-datepicker-view skm-datepicker-months-view"
    [zoomDirection]="zoomDirection"
    [initialTimestamp]="initialTimestamp"

    [currentTimestamp]="currentTimestamp"
    [selectedTimestamp]="selectedTimestamp"
    [minTimestamp]="minTimestamp"
    [maxTimestamp]="maxTimestamp"

    [headingFormat]="yearFormat"
    [itemFormat]="monthFormat"
    [itemLabels]="monthLabels"

    (headerClick)="switchView($event, ViewMode.Years, 'out')"
    (itemChange)="switchView($event, ViewMode.Days, 'in')"
  ></skm-view>
  <skm-view
    *ngSwitchCase="ViewMode.Years"
    skmYearsStrategy
    class="skm-datepicker-view skm-datepicker-years-view"
    [zoomDirection]="zoomDirection"
    [initialTimestamp]="initialTimestamp"

    [currentTimestamp]="currentTimestamp"
    [selectedTimestamp]="selectedTimestamp"
    [minTimestamp]="minTimestamp"
    [maxTimestamp]="maxTimestamp"

    [headingFormat]="yearFormat"
    [itemFormat]="yearFormat"

    (itemChange)="switchView($event, ViewMode.Months, 'in')"
  ></skm-view>
</div>
`,
                styles: [`.skm-datepicker{position:relative;overflow:hidden}.skm-datepicker-view{display:block;position:absolute;height:100%;width:100%}`, `button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}`],
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: DatepickerComponent, multi: true },
                ],
            },] },
];
/** @nocollapse */
DatepickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
];
DatepickerComponent.propDecorators = {
    "date": [{ type: Input },],
    "dateChange": [{ type: Output },],
    "min": [{ type: Input },],
    "max": [{ type: Input },],
    "deselectEnabled": [{ type: Input },],
    "dayFormat": [{ type: Input },],
    "monthFormat": [{ type: Input },],
    "yearFormat": [{ type: Input },],
    "headingFormat": [{ type: Input },],
    "weekStart": [{ type: Input },],
    "dayLabels": [{ type: Input },],
    "weekDayLabels": [{ type: Input },],
    "monthLabels": [{ type: Input },],
    "view": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?=} timing
 * @return {?}
 */
function slide(timing = 150) {
    return trigger('slide', [
        state('panning', style({
            transform: 'translateX({{x}}%)',
        }), { params: { x: 0 } }),
        transition('* => 1', animate(timing, style({
            transform: 'translateX(-100%)',
        }))),
        transition('* => -1', animate(timing, style({
            transform: 'translateX(100%)',
        }))),
        transition('panning => idle', animate(timing)),
    ]);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SliderComponent {
    /**
     * @param {?} hostRef
     * @param {?} cd
     * @param {?} zone
     */
    constructor(hostRef, cd, zone) {
        this.hostRef = hostRef;
        this.cd = cd;
        this.zone = zone;
        this.prevDisabled = false;
        this.nextDisabled = false;
        this.slideDone = new EventEmitter();
        this.notPanning = true;
        this.wrapperWidth = 1;
        this.panOffset = 0;
        this.ngUnsubscribe$ = new Subject();
        this.easeOut = createEaseOut(1.3);
        this.cd.detach();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.changeSlideTrigger();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
            const /** @type {?} */ host = this.hostRef.nativeElement;
            fromEvent(host, 'mousedown').pipe(takeUntil(this.ngUnsubscribe$)).subscribe(() => this.startPress());
            if ('Hammer' in window) {
                const /** @type {?} */ hammer = new Hammer(host);
                fromEvent(hammer, 'panstart').pipe(takeUntil(this.ngUnsubscribe$)).subscribe(() => this.startPan());
                fromEvent(hammer, 'panmove').pipe(takeUntil(this.ngUnsubscribe$)).subscribe(e => this.pan(e));
                fromEvent(hammer, 'panend pancancel').pipe(takeUntil(this.ngUnsubscribe$)).subscribe(() => this.endPan());
                fromEvent(hammer, 'swiperight').pipe(takeUntil(this.ngUnsubscribe$)).subscribe(() => this.swipe(-1));
                fromEvent(hammer, 'swipeleft').pipe(takeUntil(this.ngUnsubscribe$)).subscribe(() => this.swipe(1));
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    done(event) {
        if (event.toState === this.lastDoneEventToState) {
            // workaround for https://github.com/angular/angular/issues/24084
            return;
        }
        this.lastDoneEventToState = event.toState;
        if (/** @type {?} */ (typeof event.toState) === 'number') {
            this.slideDone.emit(/** @type {?} */ (event.toState));
        }
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    slide(direction) {
        this.changeSlideTrigger();
        setTimeout(() => this.changeSlideTrigger(/** @type {?} */ (direction)));
    }
    /**
     * @return {?}
     */
    startPress() {
        this.notPanning = true;
    }
    /**
     * @return {?}
     */
    startPan() {
        this.notPanning = false;
        this.wrapperWidth = this.hostRef.nativeElement.offsetWidth;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    pan(event) {
        const /** @type {?} */ multiplier = (event.deltaX > 0 && this.prevDisabled || event.deltaX < 0 && this.nextDisabled) ? 0.1 : 1;
        const /** @type {?} */ absOffset = Math.abs(event.deltaX / this.wrapperWidth);
        this.panOffset = Math.sign(event.deltaX) * this.easeOut(absOffset);
        this.changeSlideTrigger('panning', this.panOffset * multiplier);
    }
    /**
     * @return {?}
     */
    endPan() {
        if (Math.abs(this.panOffset) > 0.5) {
            this.changeSlideTrigger(/** @type {?} */ (-Math.sign(this.panOffset)));
        }
        else if (this.slideTrigger.value === 'panning') {
            this.changeSlideTrigger();
        }
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    swipe(direction) {
        this.changeSlideTrigger(/** @type {?} */ (direction));
    }
    /**
     * @param {?=} value
     * @param {?=} offset
     * @return {?}
     */
    changeSlideTrigger(value = 'idle', offset = 0) {
        this.slideTrigger = {
            value: (value === -1 && this.prevDisabled || value === 1 && this.nextDisabled) ? 'idle' : value,
            params: { x: offset * 100 },
        };
        this.cd.detectChanges();
    }
}
SliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'skm-slider',
                template: `<div class="skm-datepicker-slider" [@slide]="slideTrigger" (@slide.done)="done($event)">
  <ng-content></ng-content>
</div>
<button type="button" class="skm-datepicker-pagination skm-prev" (click)="slide(-1)" [disabled]="prevDisabled">&lsaquo;</button>
<button type="button" class="skm-datepicker-pagination skm-next" (click)="slide(1)" [disabled]="nextDisabled">&rsaquo;</button>
`,
                styles: [`:host{display:block;position:relative;height:100%}.skm-datepicker-slider{display:flex;position:relative;left:-100%;height:100%}.skm-datepicker-pagination{position:absolute;top:0}.skm-datepicker-pagination.skm-prev{left:0}.skm-datepicker-pagination.skm-next{right:0}`, `button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}`],
                animations: [slide()],
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
SliderComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
    { type: NgZone, },
];
SliderComponent.propDecorators = {
    "prevDisabled": [{ type: Input },],
    "nextDisabled": [{ type: Input },],
    "slideDone": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ biggerStyle = style({
    transform: 'scale(0.8)',
    opacity: 0,
});
const /** @type {?} */ smallerStyle = style({
    transform: 'scale(1.3)',
    opacity: 0,
});
/**
 * @param {?=} timing
 * @return {?}
 */
function zoom(timing = 175) {
    return trigger('zoom', [
        transition('void => in', [
            biggerStyle,
            animate(timing),
        ]),
        transition('void => out', [
            smallerStyle,
            animate(timing),
        ]),
        transition('in => void', [
            animate(timing, smallerStyle),
        ]),
        transition('out => void', [
            animate(timing, biggerStyle),
        ]),
    ]);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class ViewStrategy {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ViewComponent {
    /**
     * @param {?} viewStrategy
     */
    constructor(viewStrategy) {
        this.viewStrategy = viewStrategy;
        this.itemChange = new EventEmitter();
        this.headerClick = new EventEmitter();
        this.ViewMode = ViewMode;
        this.prevDisabled = false;
        this.nextDisabled = false;
        this.regularTimestampFields = ['currentTimestamp', 'selectedTimestamp', 'minTimestamp', 'maxTimestamp'];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.viewStrategy.viewMode !== ViewMode.Days) {
            this.regularTimestampFields.forEach(field => {
                if (field in changes) {
                    this[field] = this[field] ? this.viewStrategy.normalizeTimestamp(this[field]) : undefined;
                }
            });
        }
        if ('initialTimestamp' in changes) {
            // Must be called after normalization of other timestamps for proper behavior of min-max range
            this.initPanes(this.initialTimestamp);
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    trackIndex(index) {
        return index;
    }
    /**
     * @param {?} notPanning
     * @return {?}
     */
    clickHeader(notPanning) {
        if (notPanning) {
            this.headerClick.emit(this.panes[this.visiblePaneIndex].values[0]);
        }
    }
    /**
     * @param {?} event
     * @param {?} pane
     * @param {?} notPanning
     * @return {?}
     */
    selectItem(event, pane, notPanning) {
        if (notPanning) {
            const /** @type {?} */ button = /** @type {?} */ (event.target);
            const /** @type {?} */ index = button.dataset["index"];
            if (this.deselectEnabled && pane.values[index] === this.selectedTimestamp) {
                this.itemChange.emit(undefined);
            }
            else {
                this.itemChange.emit(pane.values[index]);
            }
        }
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    switchPanes(direction) {
        this.visiblePaneIndex = (3 + this.visiblePaneIndex + direction) % 3;
        const /** @type {?} */ index = (3 + this.visiblePaneIndex + direction) % 3;
        const /** @type {?} */ pane = this.panes[index];
        this.panes[index] = this.viewStrategy.makePane(pane.values[0], 3 * direction, pane.order, this.weekStart);
        this.updateDisabledStatus((3 + this.visiblePaneIndex - 1) % 3, (3 + this.visiblePaneIndex + 1) % 3);
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    initPanes(timestamp) {
        const /** @type {?} */ seed = this.viewStrategy.makeInitPanesSeed(timestamp);
        this.panes = [-1, 0, 1].map(i => this.viewStrategy.makePane(seed, i, 0, this.weekStart));
        this.visiblePaneIndex = 1;
        this.updateDisabledStatus(0, 2);
    }
    /**
     * @param {?} prevIndex
     * @param {?} nextIndex
     * @return {?}
     */
    updateDisabledStatus(prevIndex, nextIndex) {
        this.prevDisabled = this.panes[prevIndex].values[this.panes[prevIndex].values.length - 1] < this.minTimestamp;
        this.nextDisabled = this.panes[nextIndex].values[0] > this.maxTimestamp;
    }
}
ViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'skm-view',
                template: `<skm-slider [prevDisabled]="prevDisabled" [nextDisabled]="nextDisabled" (slideDone)="switchPanes($event)" #slider>
  <div class="skm-datepicker-pane" *ngFor="let pane of panes; trackBy: trackIndex" [style.order]="pane.order">
    <button type="button" class="skm-datepicker-header"
            (click)="clickHeader(slider.notPanning)" [disabled]="viewStrategy.viewMode === ViewMode.Years">
      {{pane.values[0] | date:headingFormat}}
      <ng-container *ngIf="viewStrategy.viewMode === ViewMode.Years">
        &ndash; {{pane.values[19] | date:headingFormat}}
      </ng-container>
    </button>
    <div class="skm-datepicker-week" *ngIf="viewStrategy.viewMode === ViewMode.Days">
      <div class="skm-datepicker-weekday" *ngFor="let label of weekDayLabels | slice:weekStart:7">{{label}}</div>
      <div class="skm-datepicker-weekday" *ngFor="let label of weekDayLabels | slice:0:weekStart">{{label}}</div>
    </div>
    <skm-grid
      [pane]="pane"
      [currentTimestamp]="currentTimestamp"
      [selectedTimestamp]="selectedTimestamp"
      [minTimestamp]="minTimestamp"
      [maxTimestamp]="maxTimestamp"
      [itemFormat]="itemFormat"
      [itemLabels]="itemLabels"
    ></skm-grid>
  </div>
</skm-slider>
`,
                styles: [`button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}`],
                animations: [zoom()],
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
ViewComponent.ctorParameters = () => [
    { type: ViewStrategy, },
];
ViewComponent.propDecorators = {
    "zoomDirection": [{ type: Input }, { type: HostBinding, args: ['@zoom',] },],
    "initialTimestamp": [{ type: Input },],
    "currentTimestamp": [{ type: Input },],
    "selectedTimestamp": [{ type: Input },],
    "minTimestamp": [{ type: Input },],
    "maxTimestamp": [{ type: Input },],
    "deselectEnabled": [{ type: Input },],
    "headingFormat": [{ type: Input },],
    "weekStart": [{ type: Input },],
    "weekDayLabels": [{ type: Input },],
    "itemFormat": [{ type: Input },],
    "itemLabels": [{ type: Input },],
    "itemChange": [{ type: Output },],
    "headerClick": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GridComponent {
    /**
     * @param {?} slider
     * @param {?} parentView
     * @param {?} viewStrategy
     */
    constructor(slider, parentView, viewStrategy) {
        this.slider = slider;
        this.parentView = parentView;
        this.viewStrategy = viewStrategy;
        this.itemLabels = [];
        this._hostClass = 'skm-datepicker-content';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('itemLabels' in changes) {
            this.itemLabels = this.itemLabels || [];
        }
    }
    /**
     * @param {?} index
     * @param {?} pane
     * @return {?}
     */
    makeItemClasses(index, pane) {
        return [
            this.viewStrategy.itemClass,
            'skm-datepicker-item',
            (pane.values[index] === this.currentTimestamp) ? 'skm-datepicker-current' : '',
            (pane.values[index] === this.selectedTimestamp) ? 'skm-datepicker-selected' : '',
        ].join(' ');
    }
    /**
     * @param {?} index
     * @param {?} pane
     * @return {?}
     */
    isDisabled(index, pane) {
        return (pane.values[index] < this.minTimestamp) || (pane.values[index] > this.maxTimestamp);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    trackIndex(index) {
        return index;
    }
}
GridComponent.decorators = [
    { type: Component, args: [{
                selector: 'skm-grid',
                template: `<div class="skm-datepicker-grid" (click)="parentView.selectItem($event, pane, slider.notPanning)">
  <div class="skm-datepicker-indent" [style.width.%]="100 / 7 * pane.indent"></div>
  <div *ngFor="let value of pane.values; trackBy: trackIndex; let i = index" class="skm-datepicker-cell">
    <button type="button" [attr.data-index]="i" [class]="makeItemClasses(i, pane)" [disabled]="isDisabled(i, pane)">
      {{itemLabels[i] || (value | date:itemFormat)}}
    </button>
  </div>
</div>
`,
                styles: [`button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}`],
                changeDetection: ChangeDetectionStrategy.OnPush,
            },] },
];
/** @nocollapse */
GridComponent.ctorParameters = () => [
    { type: SliderComponent, },
    { type: ViewComponent, },
    { type: ViewStrategy, },
];
GridComponent.propDecorators = {
    "pane": [{ type: Input },],
    "currentTimestamp": [{ type: Input },],
    "selectedTimestamp": [{ type: Input },],
    "minTimestamp": [{ type: Input },],
    "maxTimestamp": [{ type: Input },],
    "itemFormat": [{ type: Input },],
    "itemLabels": [{ type: Input },],
    "_hostClass": [{ type: HostBinding, args: ['class',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DaysStrategyDirective extends ViewStrategy {
    constructor() {
        super(...arguments);
        this.viewMode = ViewMode.Days;
        this.itemClass = 'skm-datepicker-day';
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    normalizeTimestamp(timestamp) {
        return timestamp;
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    makeInitPanesSeed(timestamp) {
        return startOfMonth(timestamp).valueOf();
    }
    /**
     * @param {?} timestamp
     * @param {?} add
     * @param {?} baseOrder
     * @param {?} weekStart
     * @return {?}
     */
    makePane(timestamp, add, baseOrder, weekStart) {
        const /** @type {?} */ date = new Date(timestamp);
        date.setMonth(add + date.getMonth());
        const /** @type {?} */ firstDay = date.getDay();
        date.setMonth(1 + date.getMonth());
        date.setDate(0);
        const /** @type {?} */ monthLength = date.getDate();
        const /** @type {?} */ values = [];
        for (let /** @type {?} */ i = 1; i <= monthLength; i++) {
            values.push(date.setDate(i));
        }
        return {
            order: baseOrder + add,
            values: values,
            indent: (firstDay - weekStart + 7) % 7 || 7,
        };
    }
}
DaysStrategyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[skmDaysStrategy]',
                providers: [
                    { provide: ViewStrategy, useExisting: DaysStrategyDirective },
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MonthsStrategyDirective extends ViewStrategy {
    constructor() {
        super(...arguments);
        this.viewMode = ViewMode.Months;
        this.itemClass = 'skm-datepicker-month';
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    normalizeTimestamp(timestamp) {
        return new Date(timestamp).setDate(1);
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    makeInitPanesSeed(timestamp) {
        return startOfYear(timestamp).valueOf();
    }
    /**
     * @param {?} timestamp
     * @param {?} add
     * @param {?} baseOrder
     * @param {?} weekStart
     * @return {?}
     */
    makePane(timestamp, add, baseOrder, weekStart) {
        const /** @type {?} */ date = new Date(timestamp);
        date.setFullYear(add + date.getFullYear());
        const /** @type {?} */ values = [];
        for (let /** @type {?} */ i = 0; i < 12; i++) {
            values.push(date.setMonth(i));
        }
        return {
            order: baseOrder + add,
            values: values,
        };
    }
}
MonthsStrategyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[skmMonthsStrategy]',
                providers: [
                    { provide: ViewStrategy, useExisting: MonthsStrategyDirective },
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class YearsStrategyDirective extends ViewStrategy {
    constructor() {
        super(...arguments);
        this.viewMode = ViewMode.Years;
        this.itemClass = 'skm-datepicker-year';
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    normalizeTimestamp(timestamp) {
        return new Date(timestamp).setMonth(0, 1);
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    makeInitPanesSeed(timestamp) {
        const /** @type {?} */ date = new Date(timestamp);
        const /** @type {?} */ origin = date.getFullYear();
        const /** @type {?} */ adjusted = origin - (origin % 20);
        return startOfYear(date).setFullYear(adjusted);
    }
    /**
     * @param {?} timestamp
     * @param {?} add
     * @param {?} baseOrder
     * @param {?} weekStart
     * @return {?}
     */
    makePane(timestamp, add, baseOrder, weekStart) {
        const /** @type {?} */ date = new Date(timestamp);
        const /** @type {?} */ origin = add * 20 + date.getFullYear();
        const /** @type {?} */ values = [];
        for (let /** @type {?} */ i = 0; i < 20; i++) {
            values.push(date.setFullYear(origin + i));
        }
        return {
            order: baseOrder + add,
            values: values,
        };
    }
}
YearsStrategyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[skmYearsStrategy]',
                providers: [
                    { provide: ViewStrategy, useExisting: YearsStrategyDirective },
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DatepickerModule {
}
DatepickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                ],
                declarations: [
                    DatepickerComponent,
                    ViewComponent,
                    SliderComponent,
                    GridComponent,
                    DaysStrategyDirective,
                    MonthsStrategyDirective,
                    YearsStrategyDirective,
                ],
                exports: [
                    DatepickerComponent,
                ],
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { DatepickerComponent, DatepickerModule, ViewMode, GridComponent as ɵf, slide as ɵe, SliderComponent as ɵd, zoom as ɵb, DaysStrategyDirective as ɵg, MonthsStrategyDirective as ɵh, ViewStrategy as ɵc, YearsStrategyDirective as ɵi, ViewComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,