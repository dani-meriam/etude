/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, LOCALE_ID, Output, } from '@angular/core';
import { FormStyle, getLocaleDayNames, TranslationWidth, WeekDay } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { isValidDate, noop, startOfDay } from '../util/helpers';
import { ViewMode } from './view-mode';
export class DatepickerComponent {
    /**
     * @param {?} cd
     * @param {?} locale
     */
    constructor(cd, locale) {
        this.cd = cd;
        this.locale = locale;
        this.dateChange = new EventEmitter();
        this.dayFormat = 'd';
        this.monthFormat = 'MMM';
        this.yearFormat = 'y';
        this.headingFormat = 'MMMM y';
        this.weekStart = WeekDay.Monday;
        this.view = ViewMode.Days;
        this.ViewMode = ViewMode;
        this.onChange = noop;
        this.onTouched = noop;
    }
    /**
     * @param {?} dirtyDate
     * @return {?}
     */
    set date(dirtyDate) {
        if (dirtyDate == null) {
            this.selectedTimestamp = undefined;
            return;
        }
        const /** @type {?} */ date = startOfDay(dirtyDate);
        if (date.getTime() !== this.selectedTimestamp) {
            this.selectedTimestamp = isValidDate(date) ? date.getTime() : undefined;
            if (typeof this.selectedTimestamp !== 'undefined') {
                this.initialTimestamp = this.selectedTimestamp;
                this.view = ViewMode.Days;
            }
        }
    }
    /**
     * @param {?} dirtyDate
     * @return {?}
     */
    set min(dirtyDate) {
        const /** @type {?} */ date = startOfDay(dirtyDate);
        this.minTimestamp = isValidDate(date) ? date.valueOf() : undefined;
    }
    /**
     * @param {?} dirtyDate
     * @return {?}
     */
    set max(dirtyDate) {
        const /** @type {?} */ date = startOfDay(dirtyDate);
        this.maxTimestamp = isValidDate(date) ? date.valueOf() : undefined;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('weekDayLabels' in changes) {
            this.weekDayLabels = this.weekDayLabels || getLocaleDayNames(this.locale, FormStyle.Standalone, TranslationWidth.Abbreviated);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currentTimestamp = startOfDay(new Date()).getTime();
        this.initialTimestamp = this.selectedTimestamp || this.currentTimestamp;
        this.weekDayLabels = this.weekDayLabels || getLocaleDayNames(this.locale, FormStyle.Standalone, TranslationWidth.Abbreviated);
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    selectDay(timestamp) {
        console.log(timestamp);
        this.selectedTimestamp = timestamp;
        const /** @type {?} */ date = (typeof timestamp !== 'undefined') ? new Date(timestamp) : undefined;
        this.onChange(date);
        this.dateChange.emit(date);
    }
    /**
     * @param {?} timestamp
     * @param {?} view
     * @param {?} direction
     * @return {?}
     */
    switchView(timestamp, view, direction) {
        this.zoomDirection = direction;
        setTimeout(() => {
            this.initialTimestamp = timestamp;
            this.view = view;
            this.cd.markForCheck();
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        this.date = obj;
        this.cd.markForCheck();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
        // TODO implement
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        // TODO implement
        this.cd.markForCheck();
    }
}
DatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'skm-datepicker',
                template: `<div class="skm-datepicker" [ngSwitch]="view">
  <skm-view
    *ngSwitchCase="ViewMode.Days"
    skmDaysStrategy
    class="skm-datepicker-view skm-datepicker-days-view"
    [zoomDirection]="zoomDirection"
    [initialTimestamp]="initialTimestamp"

    [currentTimestamp]="currentTimestamp"
    [selectedTimestamp]="selectedTimestamp"
    [minTimestamp]="minTimestamp"
    [maxTimestamp]="maxTimestamp"

    [deselectEnabled]="deselectEnabled"

    [headingFormat]="headingFormat"
    [weekStart]="weekStart"
    [weekDayLabels]="weekDayLabels"
    [itemFormat]="dayFormat"
    [itemLabels]="dayLabels"

    (headerClick)="switchView($event, ViewMode.Months, 'out')"
    (itemChange)="selectDay($event)"
  ></skm-view>
  <skm-view
    *ngSwitchCase="ViewMode.Months"
    skmMonthsStrategy
    class="skm-datepicker-view skm-datepicker-months-view"
    [zoomDirection]="zoomDirection"
    [initialTimestamp]="initialTimestamp"

    [currentTimestamp]="currentTimestamp"
    [selectedTimestamp]="selectedTimestamp"
    [minTimestamp]="minTimestamp"
    [maxTimestamp]="maxTimestamp"

    [headingFormat]="yearFormat"
    [itemFormat]="monthFormat"
    [itemLabels]="monthLabels"

    (headerClick)="switchView($event, ViewMode.Years, 'out')"
    (itemChange)="switchView($event, ViewMode.Days, 'in')"
  ></skm-view>
  <skm-view
    *ngSwitchCase="ViewMode.Years"
    skmYearsStrategy
    class="skm-datepicker-view skm-datepicker-years-view"
    [zoomDirection]="zoomDirection"
    [initialTimestamp]="initialTimestamp"

    [currentTimestamp]="currentTimestamp"
    [selectedTimestamp]="selectedTimestamp"
    [minTimestamp]="minTimestamp"
    [maxTimestamp]="maxTimestamp"

    [headingFormat]="yearFormat"
    [itemFormat]="yearFormat"

    (itemChange)="switchView($event, ViewMode.Months, 'in')"
  ></skm-view>
</div>
`,
                styles: [`.skm-datepicker{position:relative;overflow:hidden}.skm-datepicker-view{display:block;position:absolute;height:100%;width:100%}`, `button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}`],
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: DatepickerComponent, multi: true },
                ],
            },] },
];
/** @nocollapse */
DatepickerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
];
DatepickerComponent.propDecorators = {
    "date": [{ type: Input },],
    "dateChange": [{ type: Output },],
    "min": [{ type: Input },],
    "max": [{ type: Input },],
    "deselectEnabled": [{ type: Input },],
    "dayFormat": [{ type: Input },],
    "monthFormat": [{ type: Input },],
    "yearFormat": [{ type: Input },],
    "headingFormat": [{ type: Input },],
    "weekStart": [{ type: Input },],
    "dayLabels": [{ type: Input },],
    "weekDayLabels": [{ type: Input },],
    "monthLabels": [{ type: Input },],
    "view": [{ type: Input },],
};
function DatepickerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    DatepickerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    DatepickerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    DatepickerComponent.propDecorators;
    /** @type {?} */
    DatepickerComponent.prototype.dateChange;
    /** @type {?} */
    DatepickerComponent.prototype.deselectEnabled;
    /** @type {?} */
    DatepickerComponent.prototype.dayFormat;
    /** @type {?} */
    DatepickerComponent.prototype.monthFormat;
    /** @type {?} */
    DatepickerComponent.prototype.yearFormat;
    /** @type {?} */
    DatepickerComponent.prototype.headingFormat;
    /** @type {?} */
    DatepickerComponent.prototype.weekStart;
    /** @type {?} */
    DatepickerComponent.prototype.dayLabels;
    /** @type {?} */
    DatepickerComponent.prototype.weekDayLabels;
    /** @type {?} */
    DatepickerComponent.prototype.monthLabels;
    /** @type {?} */
    DatepickerComponent.prototype.view;
    /** @type {?} */
    DatepickerComponent.prototype.initialTimestamp;
    /** @type {?} */
    DatepickerComponent.prototype.currentTimestamp;
    /** @type {?} */
    DatepickerComponent.prototype.selectedTimestamp;
    /** @type {?} */
    DatepickerComponent.prototype.minTimestamp;
    /** @type {?} */
    DatepickerComponent.prototype.maxTimestamp;
    /** @type {?} */
    DatepickerComponent.prototype.zoomDirection;
    /** @type {?} */
    DatepickerComponent.prototype.ViewMode;
    /** @type {?} */
    DatepickerComponent.prototype.onChange;
    /** @type {?} */
    DatepickerComponent.prototype.onTouched;
    /** @type {?} */
    DatepickerComponent.prototype.cd;
    /** @type {?} */
    DatepickerComponent.prototype.locale;
}

//# sourceMappingURL=data:application/json;base64,