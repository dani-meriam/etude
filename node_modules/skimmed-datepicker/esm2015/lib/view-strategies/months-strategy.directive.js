/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive } from '@angular/core';
import { startOfYear } from '../util/helpers';
import { ViewStrategy } from './view-strategy';
import { ViewMode } from '../datepicker/view-mode';
export class MonthsStrategyDirective extends ViewStrategy {
    constructor() {
        super(...arguments);
        this.viewMode = ViewMode.Months;
        this.itemClass = 'skm-datepicker-month';
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    normalizeTimestamp(timestamp) {
        return new Date(timestamp).setDate(1);
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    makeInitPanesSeed(timestamp) {
        return startOfYear(timestamp).valueOf();
    }
    /**
     * @param {?} timestamp
     * @param {?} add
     * @param {?} baseOrder
     * @param {?} weekStart
     * @return {?}
     */
    makePane(timestamp, add, baseOrder, weekStart) {
        const /** @type {?} */ date = new Date(timestamp);
        date.setFullYear(add + date.getFullYear());
        const /** @type {?} */ values = [];
        for (let /** @type {?} */ i = 0; i < 12; i++) {
            values.push(date.setMonth(i));
        }
        return {
            order: baseOrder + add,
            values: values,
        };
    }
}
MonthsStrategyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[skmMonthsStrategy]',
                providers: [
                    { provide: ViewStrategy, useExisting: MonthsStrategyDirective },
                ],
            },] },
];
function MonthsStrategyDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MonthsStrategyDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MonthsStrategyDirective.ctorParameters;
    /** @type {?} */
    MonthsStrategyDirective.prototype.viewMode;
    /** @type {?} */
    MonthsStrategyDirective.prototype.itemClass;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGhzLXN0cmF0ZWd5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NraW1tZWQtZGF0ZXBpY2tlci8iLCJzb3VyY2VzIjpbImxpYi92aWV3LXN0cmF0ZWdpZXMvbW9udGhzLXN0cmF0ZWd5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQVNuRCxNQUFNLDhCQUErQixTQUFRLFlBQVk7Ozt3QkFDbkMsUUFBUSxDQUFDLE1BQU07eUJBQ2Qsc0JBQXNCOzs7Ozs7SUFFM0Msa0JBQWtCLENBQUMsU0FBaUI7UUFDbEMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN2Qzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxTQUFpQjtRQUNqQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3pDOzs7Ozs7OztJQUVELFFBQVEsQ0FBQyxTQUFpQixFQUFFLEdBQVcsRUFBRSxTQUFpQixFQUFFLFNBQWtCO1FBQzVFLHVCQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUUzQyx1QkFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9CO1FBRUQsTUFBTSxDQUFDO1lBQ0wsS0FBSyxFQUFFLFNBQVMsR0FBRyxHQUFHO1lBQ3RCLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQztLQUNIOzs7WUEvQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7Z0JBQy9CLFNBQVMsRUFBRTtvQkFDVCxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLHVCQUF1QixFQUFDO2lCQUM5RDthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBhbmUgfSBmcm9tICcuLi9wYW5lJztcclxuaW1wb3J0IHsgc3RhcnRPZlllYXIgfSBmcm9tICcuLi91dGlsL2hlbHBlcnMnO1xyXG5pbXBvcnQgeyBWaWV3U3RyYXRlZ3kgfSBmcm9tICcuL3ZpZXctc3RyYXRlZ3knO1xyXG5pbXBvcnQgeyBWaWV3TW9kZSB9IGZyb20gJy4uL2RhdGVwaWNrZXIvdmlldy1tb2RlJztcclxuaW1wb3J0IHsgV2Vla0RheSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tza21Nb250aHNTdHJhdGVneV0nLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAge3Byb3ZpZGU6IFZpZXdTdHJhdGVneSwgdXNlRXhpc3Rpbmc6IE1vbnRoc1N0cmF0ZWd5RGlyZWN0aXZlfSxcclxuICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTW9udGhzU3RyYXRlZ3lEaXJlY3RpdmUgZXh0ZW5kcyBWaWV3U3RyYXRlZ3kge1xyXG4gIHJlYWRvbmx5IHZpZXdNb2RlID0gVmlld01vZGUuTW9udGhzO1xyXG4gIHJlYWRvbmx5IGl0ZW1DbGFzcyA9ICdza20tZGF0ZXBpY2tlci1tb250aCc7XHJcblxyXG4gIG5vcm1hbGl6ZVRpbWVzdGFtcCh0aW1lc3RhbXA6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wKS5zZXREYXRlKDEpO1xyXG4gIH1cclxuXHJcbiAgbWFrZUluaXRQYW5lc1NlZWQodGltZXN0YW1wOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHN0YXJ0T2ZZZWFyKHRpbWVzdGFtcCkudmFsdWVPZigpO1xyXG4gIH1cclxuXHJcbiAgbWFrZVBhbmUodGltZXN0YW1wOiBudW1iZXIsIGFkZDogbnVtYmVyLCBiYXNlT3JkZXI6IG51bWJlciwgd2Vla1N0YXJ0OiBXZWVrRGF5KTogUGFuZSB7XHJcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTtcclxuICAgIGRhdGUuc2V0RnVsbFllYXIoYWRkICsgZGF0ZS5nZXRGdWxsWWVhcigpKTtcclxuXHJcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xyXG4gICAgICB2YWx1ZXMucHVzaChkYXRlLnNldE1vbnRoKGkpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBvcmRlcjogYmFzZU9yZGVyICsgYWRkLFxyXG4gICAgICB2YWx1ZXM6IHZhbHVlcyxcclxuICAgIH07XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=