/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive } from '@angular/core';
import { ViewStrategy } from './view-strategy';
import { ViewMode } from '../datepicker/view-mode';
import { startOfMonth } from '../util/helpers';
export class DaysStrategyDirective extends ViewStrategy {
    constructor() {
        super(...arguments);
        this.viewMode = ViewMode.Days;
        this.itemClass = 'skm-datepicker-day';
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    normalizeTimestamp(timestamp) {
        return timestamp;
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    makeInitPanesSeed(timestamp) {
        return startOfMonth(timestamp).valueOf();
    }
    /**
     * @param {?} timestamp
     * @param {?} add
     * @param {?} baseOrder
     * @param {?} weekStart
     * @return {?}
     */
    makePane(timestamp, add, baseOrder, weekStart) {
        const /** @type {?} */ date = new Date(timestamp);
        date.setMonth(add + date.getMonth());
        const /** @type {?} */ firstDay = date.getDay();
        date.setMonth(1 + date.getMonth());
        date.setDate(0);
        const /** @type {?} */ monthLength = date.getDate();
        const /** @type {?} */ values = [];
        for (let /** @type {?} */ i = 1; i <= monthLength; i++) {
            values.push(date.setDate(i));
        }
        return {
            order: baseOrder + add,
            values: values,
            indent: (firstDay - weekStart + 7) % 7 || 7,
        };
    }
}
DaysStrategyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[skmDaysStrategy]',
                providers: [
                    { provide: ViewStrategy, useExisting: DaysStrategyDirective },
                ],
            },] },
];
function DaysStrategyDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    DaysStrategyDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    DaysStrategyDirective.ctorParameters;
    /** @type {?} */
    DaysStrategyDirective.prototype.viewMode;
    /** @type {?} */
    DaysStrategyDirective.prototype.itemClass;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5cy1zdHJhdGVneS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9za2ltbWVkLWRhdGVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvdmlldy1zdHJhdGVnaWVzL2RheXMtc3RyYXRlZ3kuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFHbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBUS9DLE1BQU0sNEJBQTZCLFNBQVEsWUFBWTs7O3dCQUNqQyxRQUFRLENBQUMsSUFBSTt5QkFDWixvQkFBb0I7Ozs7OztJQUV6QyxrQkFBa0IsQ0FBQyxTQUFpQjtRQUNsQyxNQUFNLENBQUMsU0FBUyxDQUFDO0tBQ2xCOzs7OztJQUVELGlCQUFpQixDQUFDLFNBQWlCO1FBQ2pDLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDMUM7Ozs7Ozs7O0lBRUQsUUFBUSxDQUFDLFNBQWlCLEVBQUUsR0FBVyxFQUFFLFNBQWlCLEVBQUUsU0FBa0I7UUFDNUUsdUJBQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLHVCQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQix1QkFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRW5DLHVCQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMscUJBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDdEMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDOUI7UUFFRCxNQUFNLENBQUM7WUFDTCxLQUFLLEVBQUUsU0FBUyxHQUFHLEdBQUc7WUFDdEIsTUFBTSxFQUFFLE1BQU07WUFDZCxNQUFNLEVBQUUsQ0FBQyxRQUFRLEdBQUcsU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1NBQzVDLENBQUM7S0FDSDs7O1lBckNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3QixTQUFTLEVBQUU7b0JBQ1QsRUFBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxxQkFBcUIsRUFBQztpQkFDNUQ7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBWaWV3U3RyYXRlZ3kgfSBmcm9tICcuL3ZpZXctc3RyYXRlZ3knO1xyXG5pbXBvcnQgeyBWaWV3TW9kZSB9IGZyb20gJy4uL2RhdGVwaWNrZXIvdmlldy1tb2RlJztcclxuaW1wb3J0IHsgUGFuZSB9IGZyb20gJy4uL3BhbmUnO1xyXG5pbXBvcnQgeyBXZWVrRGF5IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgc3RhcnRPZk1vbnRoIH0gZnJvbSAnLi4vdXRpbC9oZWxwZXJzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3NrbURheXNTdHJhdGVneV0nLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAge3Byb3ZpZGU6IFZpZXdTdHJhdGVneSwgdXNlRXhpc3Rpbmc6IERheXNTdHJhdGVneURpcmVjdGl2ZX0sXHJcbiAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIERheXNTdHJhdGVneURpcmVjdGl2ZSBleHRlbmRzIFZpZXdTdHJhdGVneSB7XHJcbiAgcmVhZG9ubHkgdmlld01vZGUgPSBWaWV3TW9kZS5EYXlzO1xyXG4gIHJlYWRvbmx5IGl0ZW1DbGFzcyA9ICdza20tZGF0ZXBpY2tlci1kYXknO1xyXG5cclxuICBub3JtYWxpemVUaW1lc3RhbXAodGltZXN0YW1wOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRpbWVzdGFtcDtcclxuICB9XHJcblxyXG4gIG1ha2VJbml0UGFuZXNTZWVkKHRpbWVzdGFtcDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBzdGFydE9mTW9udGgodGltZXN0YW1wKS52YWx1ZU9mKCk7XHJcbiAgfVxyXG5cclxuICBtYWtlUGFuZSh0aW1lc3RhbXA6IG51bWJlciwgYWRkOiBudW1iZXIsIGJhc2VPcmRlcjogbnVtYmVyLCB3ZWVrU3RhcnQ6IFdlZWtEYXkpOiBQYW5lIHtcclxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApO1xyXG4gICAgZGF0ZS5zZXRNb250aChhZGQgKyBkYXRlLmdldE1vbnRoKCkpO1xyXG4gICAgY29uc3QgZmlyc3REYXkgPSBkYXRlLmdldERheSgpO1xyXG5cclxuICAgIGRhdGUuc2V0TW9udGgoMSArIGRhdGUuZ2V0TW9udGgoKSk7XHJcbiAgICBkYXRlLnNldERhdGUoMCk7XHJcbiAgICBjb25zdCBtb250aExlbmd0aCA9IGRhdGUuZ2V0RGF0ZSgpO1xyXG5cclxuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gbW9udGhMZW5ndGg7IGkrKykge1xyXG4gICAgICB2YWx1ZXMucHVzaChkYXRlLnNldERhdGUoaSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIG9yZGVyOiBiYXNlT3JkZXIgKyBhZGQsXHJcbiAgICAgIHZhbHVlczogdmFsdWVzLFxyXG4gICAgICBpbmRlbnQ6IChmaXJzdERheSAtIHdlZWtTdGFydCArIDcpICUgNyB8fCA3LCAvLyBEZWZhdWx0aW5nIHRvIGZ1bGwgd2VlayBtYWtlcyBmb3IgbW9yZSBhIGJhbGFuY2VkIGNlbGxzIGxheW91dFxyXG4gICAgfTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==