/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive } from '@angular/core';
import { startOfYear } from '../util/helpers';
import { ViewStrategy } from './view-strategy';
import { ViewMode } from '../datepicker/view-mode';
export class YearsStrategyDirective extends ViewStrategy {
    constructor() {
        super(...arguments);
        this.viewMode = ViewMode.Years;
        this.itemClass = 'skm-datepicker-year';
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    normalizeTimestamp(timestamp) {
        return new Date(timestamp).setMonth(0, 1);
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    makeInitPanesSeed(timestamp) {
        const /** @type {?} */ date = new Date(timestamp);
        const /** @type {?} */ origin = date.getFullYear();
        const /** @type {?} */ adjusted = origin - (origin % 20);
        return startOfYear(date).setFullYear(adjusted);
    }
    /**
     * @param {?} timestamp
     * @param {?} add
     * @param {?} baseOrder
     * @param {?} weekStart
     * @return {?}
     */
    makePane(timestamp, add, baseOrder, weekStart) {
        const /** @type {?} */ date = new Date(timestamp);
        const /** @type {?} */ origin = add * 20 + date.getFullYear();
        const /** @type {?} */ values = [];
        for (let /** @type {?} */ i = 0; i < 20; i++) {
            values.push(date.setFullYear(origin + i));
        }
        return {
            order: baseOrder + add,
            values: values,
        };
    }
}
YearsStrategyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[skmYearsStrategy]',
                providers: [
                    { provide: ViewStrategy, useExisting: YearsStrategyDirective },
                ],
            },] },
];
function YearsStrategyDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    YearsStrategyDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    YearsStrategyDirective.ctorParameters;
    /** @type {?} */
    YearsStrategyDirective.prototype.viewMode;
    /** @type {?} */
    YearsStrategyDirective.prototype.itemClass;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVhcnMtc3RyYXRlZ3kuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2tpbW1lZC1kYXRlcGlja2VyLyIsInNvdXJjZXMiOlsibGliL3ZpZXctc3RyYXRlZ2llcy95ZWFycy1zdHJhdGVneS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFTbkQsTUFBTSw2QkFBOEIsU0FBUSxZQUFZOzs7d0JBQ2xDLFFBQVEsQ0FBQyxLQUFLO3lCQUNiLHFCQUFxQjs7Ozs7O0lBRTFDLGtCQUFrQixDQUFDLFNBQWlCO1FBQ2xDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzNDOzs7OztJQUVELGlCQUFpQixDQUFDLFNBQWlCO1FBQ2pDLHVCQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqQyx1QkFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xDLHVCQUFNLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDeEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDaEQ7Ozs7Ozs7O0lBRUQsUUFBUSxDQUFDLFNBQWlCLEVBQUUsR0FBVyxFQUFFLFNBQWlCLEVBQUUsU0FBa0I7UUFDNUUsdUJBQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pDLHVCQUFNLE1BQU0sR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUU3Qyx1QkFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzQztRQUVELE1BQU0sQ0FBQztZQUNMLEtBQUssRUFBRSxTQUFTLEdBQUcsR0FBRztZQUN0QixNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUM7S0FDSDs7O1lBbENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixTQUFTLEVBQUU7b0JBQ1QsRUFBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBQztpQkFDN0Q7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQYW5lIH0gZnJvbSAnLi4vcGFuZSc7XHJcbmltcG9ydCB7IHN0YXJ0T2ZZZWFyIH0gZnJvbSAnLi4vdXRpbC9oZWxwZXJzJztcclxuaW1wb3J0IHsgVmlld1N0cmF0ZWd5IH0gZnJvbSAnLi92aWV3LXN0cmF0ZWd5JztcclxuaW1wb3J0IHsgVmlld01vZGUgfSBmcm9tICcuLi9kYXRlcGlja2VyL3ZpZXctbW9kZSc7XHJcbmltcG9ydCB7IFdlZWtEYXkgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbc2ttWWVhcnNTdHJhdGVneV0nLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAge3Byb3ZpZGU6IFZpZXdTdHJhdGVneSwgdXNlRXhpc3Rpbmc6IFllYXJzU3RyYXRlZ3lEaXJlY3RpdmV9LFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBZZWFyc1N0cmF0ZWd5RGlyZWN0aXZlIGV4dGVuZHMgVmlld1N0cmF0ZWd5IHtcclxuICByZWFkb25seSB2aWV3TW9kZSA9IFZpZXdNb2RlLlllYXJzO1xyXG4gIHJlYWRvbmx5IGl0ZW1DbGFzcyA9ICdza20tZGF0ZXBpY2tlci15ZWFyJztcclxuXHJcbiAgbm9ybWFsaXplVGltZXN0YW1wKHRpbWVzdGFtcDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXApLnNldE1vbnRoKDAsIDEpO1xyXG4gIH1cclxuXHJcbiAgbWFrZUluaXRQYW5lc1NlZWQodGltZXN0YW1wOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCk7XHJcbiAgICBjb25zdCBvcmlnaW4gPSBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICBjb25zdCBhZGp1c3RlZCA9IG9yaWdpbiAtIChvcmlnaW4gJSAyMCk7XHJcbiAgICByZXR1cm4gc3RhcnRPZlllYXIoZGF0ZSkuc2V0RnVsbFllYXIoYWRqdXN0ZWQpO1xyXG4gIH1cclxuXHJcbiAgbWFrZVBhbmUodGltZXN0YW1wOiBudW1iZXIsIGFkZDogbnVtYmVyLCBiYXNlT3JkZXI6IG51bWJlciwgd2Vla1N0YXJ0OiBXZWVrRGF5KTogUGFuZSB7XHJcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTtcclxuICAgIGNvbnN0IG9yaWdpbiA9IGFkZCAqIDIwICsgZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG5cclxuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyMDsgaSsrKSB7XHJcbiAgICAgIHZhbHVlcy5wdXNoKGRhdGUuc2V0RnVsbFllYXIob3JpZ2luICsgaSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIG9yZGVyOiBiYXNlT3JkZXIgKyBhZGQsXHJcbiAgICAgIHZhbHVlczogdmFsdWVzLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==