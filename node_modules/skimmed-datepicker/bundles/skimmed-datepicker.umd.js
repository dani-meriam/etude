(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/animations'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('skimmed-datepicker', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/animations', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global['skimmed-datepicker'] = {}),global.ng.core,global.ng.common,global.ng.forms,global.ng.animations,global.rxjs,global.rxjs.operators));
}(this, (function (exports,core,common,forms,animations,rxjs,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} date
     * @return {?}
     */
    function isValidDate(date) {
        return !isNaN(date.getTime());
    }
    /**
     * @param {?} date
     * @return {?}
     */
    function startOfDay(date) {
        var /** @type {?} */ d = new Date(/** @type {?} */ (date));
        d.setHours(0, 0, 0, 0);
        return d;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    function startOfMonth(date) {
        var /** @type {?} */ d = new Date(/** @type {?} */ (date));
        d.setHours(0, 0, 0, 0);
        d.setDate(1);
        return d;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    function startOfYear(date) {
        var /** @type {?} */ d = new Date(/** @type {?} */ (date));
        d.setHours(0, 0, 0, 0);
        d.setMonth(0, 1);
        return d;
    }
    /**
     * @param {?} panRatio
     * @return {?}
     */
    function createEaseOut(panRatio) {
        var /** @type {?} */ a = (panRatio - 2) / Math.pow(panRatio, 3);
        var /** @type {?} */ b = (3 - 2 * panRatio) / Math.pow(panRatio, 2);
        return function easeOut(x) {
            return (x >= panRatio) ? 1 : ((a * x + b) * x + 1) * x;
        };
    }
    /**
     * @return {?}
     */
    function noop() {
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {string} */
    var ViewMode = {
        Days: 'days',
        Months: 'months',
        Years: 'years',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DatepickerComponent = (function () {
        function DatepickerComponent(cd, locale) {
            this.cd = cd;
            this.locale = locale;
            this.dateChange = new core.EventEmitter();
            this.dayFormat = 'd';
            this.monthFormat = 'MMM';
            this.yearFormat = 'y';
            this.headingFormat = 'MMMM y';
            this.weekStart = common.WeekDay.Monday;
            this.view = ViewMode.Days;
            this.ViewMode = ViewMode;
            this.onChange = noop;
            this.onTouched = noop;
        }
        Object.defineProperty(DatepickerComponent.prototype, "date", {
            set: /**
             * @param {?} dirtyDate
             * @return {?}
             */ function (dirtyDate) {
                if (dirtyDate == null) {
                    this.selectedTimestamp = undefined;
                    return;
                }
                var /** @type {?} */ date = startOfDay(dirtyDate);
                if (date.getTime() !== this.selectedTimestamp) {
                    this.selectedTimestamp = isValidDate(date) ? date.getTime() : undefined;
                    if (typeof this.selectedTimestamp !== 'undefined') {
                        this.initialTimestamp = this.selectedTimestamp;
                        this.view = ViewMode.Days;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatepickerComponent.prototype, "min", {
            set: /**
             * @param {?} dirtyDate
             * @return {?}
             */ function (dirtyDate) {
                var /** @type {?} */ date = startOfDay(dirtyDate);
                this.minTimestamp = isValidDate(date) ? date.valueOf() : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DatepickerComponent.prototype, "max", {
            set: /**
             * @param {?} dirtyDate
             * @return {?}
             */ function (dirtyDate) {
                var /** @type {?} */ date = startOfDay(dirtyDate);
                this.maxTimestamp = isValidDate(date) ? date.valueOf() : undefined;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} changes
         * @return {?}
         */
        DatepickerComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if ('weekDayLabels' in changes) {
                    this.weekDayLabels = this.weekDayLabels || common.getLocaleDayNames(this.locale, common.FormStyle.Standalone, common.TranslationWidth.Abbreviated);
                }
            };
        /**
         * @return {?}
         */
        DatepickerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.currentTimestamp = startOfDay(new Date()).getTime();
                this.initialTimestamp = this.selectedTimestamp || this.currentTimestamp;
                this.weekDayLabels = this.weekDayLabels || common.getLocaleDayNames(this.locale, common.FormStyle.Standalone, common.TranslationWidth.Abbreviated);
            };
        /**
         * @param {?} timestamp
         * @return {?}
         */
        DatepickerComponent.prototype.selectDay = /**
         * @param {?} timestamp
         * @return {?}
         */
            function (timestamp) {
                console.log(timestamp);
                this.selectedTimestamp = timestamp;
                var /** @type {?} */ date = (typeof timestamp !== 'undefined') ? new Date(timestamp) : undefined;
                this.onChange(date);
                this.dateChange.emit(date);
            };
        /**
         * @param {?} timestamp
         * @param {?} view
         * @param {?} direction
         * @return {?}
         */
        DatepickerComponent.prototype.switchView = /**
         * @param {?} timestamp
         * @param {?} view
         * @param {?} direction
         * @return {?}
         */
            function (timestamp, view, direction) {
                var _this = this;
                this.zoomDirection = direction;
                setTimeout(function () {
                    _this.initialTimestamp = timestamp;
                    _this.view = view;
                    _this.cd.markForCheck();
                });
            };
        // ControlValueAccessor implementation
        /**
         * @param {?} obj
         * @return {?}
         */
        DatepickerComponent.prototype.writeValue = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                this.date = obj;
                this.cd.markForCheck();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        DatepickerComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        DatepickerComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouched = fn;
                // TODO implement
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        DatepickerComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                // TODO implement
                this.cd.markForCheck();
            };
        DatepickerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'skm-datepicker',
                        template: "<div class=\"skm-datepicker\" [ngSwitch]=\"view\">\n  <skm-view\n    *ngSwitchCase=\"ViewMode.Days\"\n    skmDaysStrategy\n    class=\"skm-datepicker-view skm-datepicker-days-view\"\n    [zoomDirection]=\"zoomDirection\"\n    [initialTimestamp]=\"initialTimestamp\"\n\n    [currentTimestamp]=\"currentTimestamp\"\n    [selectedTimestamp]=\"selectedTimestamp\"\n    [minTimestamp]=\"minTimestamp\"\n    [maxTimestamp]=\"maxTimestamp\"\n\n    [deselectEnabled]=\"deselectEnabled\"\n\n    [headingFormat]=\"headingFormat\"\n    [weekStart]=\"weekStart\"\n    [weekDayLabels]=\"weekDayLabels\"\n    [itemFormat]=\"dayFormat\"\n    [itemLabels]=\"dayLabels\"\n\n    (headerClick)=\"switchView($event, ViewMode.Months, 'out')\"\n    (itemChange)=\"selectDay($event)\"\n  ></skm-view>\n  <skm-view\n    *ngSwitchCase=\"ViewMode.Months\"\n    skmMonthsStrategy\n    class=\"skm-datepicker-view skm-datepicker-months-view\"\n    [zoomDirection]=\"zoomDirection\"\n    [initialTimestamp]=\"initialTimestamp\"\n\n    [currentTimestamp]=\"currentTimestamp\"\n    [selectedTimestamp]=\"selectedTimestamp\"\n    [minTimestamp]=\"minTimestamp\"\n    [maxTimestamp]=\"maxTimestamp\"\n\n    [headingFormat]=\"yearFormat\"\n    [itemFormat]=\"monthFormat\"\n    [itemLabels]=\"monthLabels\"\n\n    (headerClick)=\"switchView($event, ViewMode.Years, 'out')\"\n    (itemChange)=\"switchView($event, ViewMode.Days, 'in')\"\n  ></skm-view>\n  <skm-view\n    *ngSwitchCase=\"ViewMode.Years\"\n    skmYearsStrategy\n    class=\"skm-datepicker-view skm-datepicker-years-view\"\n    [zoomDirection]=\"zoomDirection\"\n    [initialTimestamp]=\"initialTimestamp\"\n\n    [currentTimestamp]=\"currentTimestamp\"\n    [selectedTimestamp]=\"selectedTimestamp\"\n    [minTimestamp]=\"minTimestamp\"\n    [maxTimestamp]=\"maxTimestamp\"\n\n    [headingFormat]=\"yearFormat\"\n    [itemFormat]=\"yearFormat\"\n\n    (itemChange)=\"switchView($event, ViewMode.Months, 'in')\"\n  ></skm-view>\n</div>\n",
                        styles: [".skm-datepicker{position:relative;overflow:hidden}.skm-datepicker-view{display:block;position:absolute;height:100%;width:100%}", "button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}"],
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [
                            { provide: forms.NG_VALUE_ACCESSOR, useExisting: DatepickerComponent, multi: true },
                        ],
                    },] },
        ];
        /** @nocollapse */
        DatepickerComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef, },
                { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
            ];
        };
        DatepickerComponent.propDecorators = {
            "date": [{ type: core.Input },],
            "dateChange": [{ type: core.Output },],
            "min": [{ type: core.Input },],
            "max": [{ type: core.Input },],
            "deselectEnabled": [{ type: core.Input },],
            "dayFormat": [{ type: core.Input },],
            "monthFormat": [{ type: core.Input },],
            "yearFormat": [{ type: core.Input },],
            "headingFormat": [{ type: core.Input },],
            "weekStart": [{ type: core.Input },],
            "dayLabels": [{ type: core.Input },],
            "weekDayLabels": [{ type: core.Input },],
            "monthLabels": [{ type: core.Input },],
            "view": [{ type: core.Input },],
        };
        return DatepickerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?=} timing
     * @return {?}
     */
    function slide(timing) {
        if (timing === void 0) {
            timing = 150;
        }
        return animations.trigger('slide', [
            animations.state('panning', animations.style({
                transform: 'translateX({{x}}%)',
            }), { params: { x: 0 } }),
            animations.transition('* => 1', animations.animate(timing, animations.style({
                transform: 'translateX(-100%)',
            }))),
            animations.transition('* => -1', animations.animate(timing, animations.style({
                transform: 'translateX(100%)',
            }))),
            animations.transition('panning => idle', animations.animate(timing)),
        ]);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SliderComponent = (function () {
        function SliderComponent(hostRef, cd, zone) {
            this.hostRef = hostRef;
            this.cd = cd;
            this.zone = zone;
            this.prevDisabled = false;
            this.nextDisabled = false;
            this.slideDone = new core.EventEmitter();
            this.notPanning = true;
            this.wrapperWidth = 1;
            this.panOffset = 0;
            this.ngUnsubscribe$ = new rxjs.Subject();
            this.easeOut = createEaseOut(1.3);
            this.cd.detach();
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        SliderComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                this.changeSlideTrigger();
            };
        /**
         * @return {?}
         */
        SliderComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.zone.runOutsideAngular(function () {
                    var /** @type {?} */ host = _this.hostRef.nativeElement;
                    rxjs.fromEvent(host, 'mousedown').pipe(operators.takeUntil(_this.ngUnsubscribe$)).subscribe(function () { return _this.startPress(); });
                    if ('Hammer' in window) {
                        var /** @type {?} */ hammer = new Hammer(host);
                        rxjs.fromEvent(hammer, 'panstart').pipe(operators.takeUntil(_this.ngUnsubscribe$)).subscribe(function () { return _this.startPan(); });
                        rxjs.fromEvent(hammer, 'panmove').pipe(operators.takeUntil(_this.ngUnsubscribe$)).subscribe(function (e) { return _this.pan(e); });
                        rxjs.fromEvent(hammer, 'panend pancancel').pipe(operators.takeUntil(_this.ngUnsubscribe$)).subscribe(function () { return _this.endPan(); });
                        rxjs.fromEvent(hammer, 'swiperight').pipe(operators.takeUntil(_this.ngUnsubscribe$)).subscribe(function () { return _this.swipe(-1); });
                        rxjs.fromEvent(hammer, 'swipeleft').pipe(operators.takeUntil(_this.ngUnsubscribe$)).subscribe(function () { return _this.swipe(1); });
                    }
                });
            };
        /**
         * @return {?}
         */
        SliderComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.ngUnsubscribe$.next();
                this.ngUnsubscribe$.complete();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SliderComponent.prototype.done = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.toState === this.lastDoneEventToState) {
                    // workaround for https://github.com/angular/angular/issues/24084
                    return;
                }
                this.lastDoneEventToState = event.toState;
                if ((typeof event.toState) === 'number') {
                    this.slideDone.emit(/** @type {?} */ (event.toState));
                }
            };
        /**
         * @param {?} direction
         * @return {?}
         */
        SliderComponent.prototype.slide = /**
         * @param {?} direction
         * @return {?}
         */
            function (direction) {
                var _this = this;
                this.changeSlideTrigger();
                setTimeout(function () { return _this.changeSlideTrigger(/** @type {?} */ (direction)); });
            };
        /**
         * @return {?}
         */
        SliderComponent.prototype.startPress = /**
         * @return {?}
         */
            function () {
                this.notPanning = true;
            };
        /**
         * @return {?}
         */
        SliderComponent.prototype.startPan = /**
         * @return {?}
         */
            function () {
                this.notPanning = false;
                this.wrapperWidth = this.hostRef.nativeElement.offsetWidth;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SliderComponent.prototype.pan = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var /** @type {?} */ multiplier = (event.deltaX > 0 && this.prevDisabled || event.deltaX < 0 && this.nextDisabled) ? 0.1 : 1;
                var /** @type {?} */ absOffset = Math.abs(event.deltaX / this.wrapperWidth);
                this.panOffset = Math.sign(event.deltaX) * this.easeOut(absOffset);
                this.changeSlideTrigger('panning', this.panOffset * multiplier);
            };
        /**
         * @return {?}
         */
        SliderComponent.prototype.endPan = /**
         * @return {?}
         */
            function () {
                if (Math.abs(this.panOffset) > 0.5) {
                    this.changeSlideTrigger(/** @type {?} */ (-Math.sign(this.panOffset)));
                }
                else if (this.slideTrigger.value === 'panning') {
                    this.changeSlideTrigger();
                }
            };
        /**
         * @param {?} direction
         * @return {?}
         */
        SliderComponent.prototype.swipe = /**
         * @param {?} direction
         * @return {?}
         */
            function (direction) {
                this.changeSlideTrigger(/** @type {?} */ (direction));
            };
        /**
         * @param {?=} value
         * @param {?=} offset
         * @return {?}
         */
        SliderComponent.prototype.changeSlideTrigger = /**
         * @param {?=} value
         * @param {?=} offset
         * @return {?}
         */
            function (value, offset) {
                if (value === void 0) {
                    value = 'idle';
                }
                if (offset === void 0) {
                    offset = 0;
                }
                this.slideTrigger = {
                    value: (value === -1 && this.prevDisabled || value === 1 && this.nextDisabled) ? 'idle' : value,
                    params: { x: offset * 100 },
                };
                this.cd.detectChanges();
            };
        SliderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'skm-slider',
                        template: "<div class=\"skm-datepicker-slider\" [@slide]=\"slideTrigger\" (@slide.done)=\"done($event)\">\n  <ng-content></ng-content>\n</div>\n<button type=\"button\" class=\"skm-datepicker-pagination skm-prev\" (click)=\"slide(-1)\" [disabled]=\"prevDisabled\">&lsaquo;</button>\n<button type=\"button\" class=\"skm-datepicker-pagination skm-next\" (click)=\"slide(1)\" [disabled]=\"nextDisabled\">&rsaquo;</button>\n",
                        styles: [":host{display:block;position:relative;height:100%}.skm-datepicker-slider{display:flex;position:relative;left:-100%;height:100%}.skm-datepicker-pagination{position:absolute;top:0}.skm-datepicker-pagination.skm-prev{left:0}.skm-datepicker-pagination.skm-next{right:0}", "button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}"],
                        animations: [slide()],
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                    },] },
        ];
        /** @nocollapse */
        SliderComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef, },
                { type: core.ChangeDetectorRef, },
                { type: core.NgZone, },
            ];
        };
        SliderComponent.propDecorators = {
            "prevDisabled": [{ type: core.Input },],
            "nextDisabled": [{ type: core.Input },],
            "slideDone": [{ type: core.Output },],
        };
        return SliderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ biggerStyle = animations.style({
        transform: 'scale(0.8)',
        opacity: 0,
    });
    var /** @type {?} */ smallerStyle = animations.style({
        transform: 'scale(1.3)',
        opacity: 0,
    });
    /**
     * @param {?=} timing
     * @return {?}
     */
    function zoom(timing) {
        if (timing === void 0) {
            timing = 175;
        }
        return animations.trigger('zoom', [
            animations.transition('void => in', [
                biggerStyle,
                animations.animate(timing),
            ]),
            animations.transition('void => out', [
                smallerStyle,
                animations.animate(timing),
            ]),
            animations.transition('in => void', [
                animations.animate(timing, smallerStyle),
            ]),
            animations.transition('out => void', [
                animations.animate(timing, biggerStyle),
            ]),
        ]);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ ViewStrategy = (function () {
        function ViewStrategy() {
        }
        return ViewStrategy;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ViewComponent = (function () {
        function ViewComponent(viewStrategy) {
            this.viewStrategy = viewStrategy;
            this.itemChange = new core.EventEmitter();
            this.headerClick = new core.EventEmitter();
            this.ViewMode = ViewMode;
            this.prevDisabled = false;
            this.nextDisabled = false;
            this.regularTimestampFields = ['currentTimestamp', 'selectedTimestamp', 'minTimestamp', 'maxTimestamp'];
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ViewComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                if (this.viewStrategy.viewMode !== ViewMode.Days) {
                    this.regularTimestampFields.forEach(function (field) {
                        if (field in changes) {
                            _this[field] = _this[field] ? _this.viewStrategy.normalizeTimestamp(_this[field]) : undefined;
                        }
                    });
                }
                if ('initialTimestamp' in changes) {
                    // Must be called after normalization of other timestamps for proper behavior of min-max range
                    this.initPanes(this.initialTimestamp);
                }
            };
        /**
         * @param {?} index
         * @return {?}
         */
        ViewComponent.prototype.trackIndex = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return index;
            };
        /**
         * @param {?} notPanning
         * @return {?}
         */
        ViewComponent.prototype.clickHeader = /**
         * @param {?} notPanning
         * @return {?}
         */
            function (notPanning) {
                if (notPanning) {
                    this.headerClick.emit(this.panes[this.visiblePaneIndex].values[0]);
                }
            };
        /**
         * @param {?} event
         * @param {?} pane
         * @param {?} notPanning
         * @return {?}
         */
        ViewComponent.prototype.selectItem = /**
         * @param {?} event
         * @param {?} pane
         * @param {?} notPanning
         * @return {?}
         */
            function (event, pane, notPanning) {
                if (notPanning) {
                    var /** @type {?} */ button = (event.target);
                    var /** @type {?} */ index = button.dataset["index"];
                    if (this.deselectEnabled && pane.values[index] === this.selectedTimestamp) {
                        this.itemChange.emit(undefined);
                    }
                    else {
                        this.itemChange.emit(pane.values[index]);
                    }
                }
            };
        /**
         * @param {?} direction
         * @return {?}
         */
        ViewComponent.prototype.switchPanes = /**
         * @param {?} direction
         * @return {?}
         */
            function (direction) {
                this.visiblePaneIndex = (3 + this.visiblePaneIndex + direction) % 3;
                var /** @type {?} */ index = (3 + this.visiblePaneIndex + direction) % 3;
                var /** @type {?} */ pane = this.panes[index];
                this.panes[index] = this.viewStrategy.makePane(pane.values[0], 3 * direction, pane.order, this.weekStart);
                this.updateDisabledStatus((3 + this.visiblePaneIndex - 1) % 3, (3 + this.visiblePaneIndex + 1) % 3);
            };
        /**
         * @param {?} timestamp
         * @return {?}
         */
        ViewComponent.prototype.initPanes = /**
         * @param {?} timestamp
         * @return {?}
         */
            function (timestamp) {
                var _this = this;
                var /** @type {?} */ seed = this.viewStrategy.makeInitPanesSeed(timestamp);
                this.panes = [-1, 0, 1].map(function (i) { return _this.viewStrategy.makePane(seed, i, 0, _this.weekStart); });
                this.visiblePaneIndex = 1;
                this.updateDisabledStatus(0, 2);
            };
        /**
         * @param {?} prevIndex
         * @param {?} nextIndex
         * @return {?}
         */
        ViewComponent.prototype.updateDisabledStatus = /**
         * @param {?} prevIndex
         * @param {?} nextIndex
         * @return {?}
         */
            function (prevIndex, nextIndex) {
                this.prevDisabled = this.panes[prevIndex].values[this.panes[prevIndex].values.length - 1] < this.minTimestamp;
                this.nextDisabled = this.panes[nextIndex].values[0] > this.maxTimestamp;
            };
        ViewComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'skm-view',
                        template: "<skm-slider [prevDisabled]=\"prevDisabled\" [nextDisabled]=\"nextDisabled\" (slideDone)=\"switchPanes($event)\" #slider>\n  <div class=\"skm-datepicker-pane\" *ngFor=\"let pane of panes; trackBy: trackIndex\" [style.order]=\"pane.order\">\n    <button type=\"button\" class=\"skm-datepicker-header\"\n            (click)=\"clickHeader(slider.notPanning)\" [disabled]=\"viewStrategy.viewMode === ViewMode.Years\">\n      {{pane.values[0] | date:headingFormat}}\n      <ng-container *ngIf=\"viewStrategy.viewMode === ViewMode.Years\">\n        &ndash; {{pane.values[19] | date:headingFormat}}\n      </ng-container>\n    </button>\n    <div class=\"skm-datepicker-week\" *ngIf=\"viewStrategy.viewMode === ViewMode.Days\">\n      <div class=\"skm-datepicker-weekday\" *ngFor=\"let label of weekDayLabels | slice:weekStart:7\">{{label}}</div>\n      <div class=\"skm-datepicker-weekday\" *ngFor=\"let label of weekDayLabels | slice:0:weekStart\">{{label}}</div>\n    </div>\n    <skm-grid\n      [pane]=\"pane\"\n      [currentTimestamp]=\"currentTimestamp\"\n      [selectedTimestamp]=\"selectedTimestamp\"\n      [minTimestamp]=\"minTimestamp\"\n      [maxTimestamp]=\"maxTimestamp\"\n      [itemFormat]=\"itemFormat\"\n      [itemLabels]=\"itemLabels\"\n    ></skm-grid>\n  </div>\n</skm-slider>\n",
                        styles: ["button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}"],
                        animations: [zoom()],
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                    },] },
        ];
        /** @nocollapse */
        ViewComponent.ctorParameters = function () {
            return [
                { type: ViewStrategy, },
            ];
        };
        ViewComponent.propDecorators = {
            "zoomDirection": [{ type: core.Input }, { type: core.HostBinding, args: ['@zoom',] },],
            "initialTimestamp": [{ type: core.Input },],
            "currentTimestamp": [{ type: core.Input },],
            "selectedTimestamp": [{ type: core.Input },],
            "minTimestamp": [{ type: core.Input },],
            "maxTimestamp": [{ type: core.Input },],
            "deselectEnabled": [{ type: core.Input },],
            "headingFormat": [{ type: core.Input },],
            "weekStart": [{ type: core.Input },],
            "weekDayLabels": [{ type: core.Input },],
            "itemFormat": [{ type: core.Input },],
            "itemLabels": [{ type: core.Input },],
            "itemChange": [{ type: core.Output },],
            "headerClick": [{ type: core.Output },],
        };
        return ViewComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GridComponent = (function () {
        function GridComponent(slider, parentView, viewStrategy) {
            this.slider = slider;
            this.parentView = parentView;
            this.viewStrategy = viewStrategy;
            this.itemLabels = [];
            this._hostClass = 'skm-datepicker-content';
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        GridComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if ('itemLabels' in changes) {
                    this.itemLabels = this.itemLabels || [];
                }
            };
        /**
         * @param {?} index
         * @param {?} pane
         * @return {?}
         */
        GridComponent.prototype.makeItemClasses = /**
         * @param {?} index
         * @param {?} pane
         * @return {?}
         */
            function (index, pane) {
                return [
                    this.viewStrategy.itemClass,
                    'skm-datepicker-item',
                    (pane.values[index] === this.currentTimestamp) ? 'skm-datepicker-current' : '',
                    (pane.values[index] === this.selectedTimestamp) ? 'skm-datepicker-selected' : '',
                ].join(' ');
            };
        /**
         * @param {?} index
         * @param {?} pane
         * @return {?}
         */
        GridComponent.prototype.isDisabled = /**
         * @param {?} index
         * @param {?} pane
         * @return {?}
         */
            function (index, pane) {
                return (pane.values[index] < this.minTimestamp) || (pane.values[index] > this.maxTimestamp);
            };
        /**
         * @param {?} index
         * @return {?}
         */
        GridComponent.prototype.trackIndex = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return index;
            };
        GridComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'skm-grid',
                        template: "<div class=\"skm-datepicker-grid\" (click)=\"parentView.selectItem($event, pane, slider.notPanning)\">\n  <div class=\"skm-datepicker-indent\" [style.width.%]=\"100 / 7 * pane.indent\"></div>\n  <div *ngFor=\"let value of pane.values; trackBy: trackIndex; let i = index\" class=\"skm-datepicker-cell\">\n    <button type=\"button\" [attr.data-index]=\"i\" [class]=\"makeItemClasses(i, pane)\" [disabled]=\"isDisabled(i, pane)\">\n      {{itemLabels[i] || (value | date:itemFormat)}}\n    </button>\n  </div>\n</div>\n",
                        styles: ["button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}"],
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                    },] },
        ];
        /** @nocollapse */
        GridComponent.ctorParameters = function () {
            return [
                { type: SliderComponent, },
                { type: ViewComponent, },
                { type: ViewStrategy, },
            ];
        };
        GridComponent.propDecorators = {
            "pane": [{ type: core.Input },],
            "currentTimestamp": [{ type: core.Input },],
            "selectedTimestamp": [{ type: core.Input },],
            "minTimestamp": [{ type: core.Input },],
            "maxTimestamp": [{ type: core.Input },],
            "itemFormat": [{ type: core.Input },],
            "itemLabels": [{ type: core.Input },],
            "_hostClass": [{ type: core.HostBinding, args: ['class',] },],
        };
        return GridComponent;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DaysStrategyDirective = (function (_super) {
        __extends(DaysStrategyDirective, _super);
        function DaysStrategyDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.viewMode = ViewMode.Days;
            _this.itemClass = 'skm-datepicker-day';
            return _this;
        }
        /**
         * @param {?} timestamp
         * @return {?}
         */
        DaysStrategyDirective.prototype.normalizeTimestamp = /**
         * @param {?} timestamp
         * @return {?}
         */
            function (timestamp) {
                return timestamp;
            };
        /**
         * @param {?} timestamp
         * @return {?}
         */
        DaysStrategyDirective.prototype.makeInitPanesSeed = /**
         * @param {?} timestamp
         * @return {?}
         */
            function (timestamp) {
                return startOfMonth(timestamp).valueOf();
            };
        /**
         * @param {?} timestamp
         * @param {?} add
         * @param {?} baseOrder
         * @param {?} weekStart
         * @return {?}
         */
        DaysStrategyDirective.prototype.makePane = /**
         * @param {?} timestamp
         * @param {?} add
         * @param {?} baseOrder
         * @param {?} weekStart
         * @return {?}
         */
            function (timestamp, add, baseOrder, weekStart) {
                var /** @type {?} */ date = new Date(timestamp);
                date.setMonth(add + date.getMonth());
                var /** @type {?} */ firstDay = date.getDay();
                date.setMonth(1 + date.getMonth());
                date.setDate(0);
                var /** @type {?} */ monthLength = date.getDate();
                var /** @type {?} */ values = [];
                for (var /** @type {?} */ i = 1; i <= monthLength; i++) {
                    values.push(date.setDate(i));
                }
                return {
                    order: baseOrder + add,
                    values: values,
                    indent: (firstDay - weekStart + 7) % 7 || 7,
                };
            };
        DaysStrategyDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[skmDaysStrategy]',
                        providers: [
                            { provide: ViewStrategy, useExisting: DaysStrategyDirective },
                        ],
                    },] },
        ];
        return DaysStrategyDirective;
    }(ViewStrategy));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MonthsStrategyDirective = (function (_super) {
        __extends(MonthsStrategyDirective, _super);
        function MonthsStrategyDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.viewMode = ViewMode.Months;
            _this.itemClass = 'skm-datepicker-month';
            return _this;
        }
        /**
         * @param {?} timestamp
         * @return {?}
         */
        MonthsStrategyDirective.prototype.normalizeTimestamp = /**
         * @param {?} timestamp
         * @return {?}
         */
            function (timestamp) {
                return new Date(timestamp).setDate(1);
            };
        /**
         * @param {?} timestamp
         * @return {?}
         */
        MonthsStrategyDirective.prototype.makeInitPanesSeed = /**
         * @param {?} timestamp
         * @return {?}
         */
            function (timestamp) {
                return startOfYear(timestamp).valueOf();
            };
        /**
         * @param {?} timestamp
         * @param {?} add
         * @param {?} baseOrder
         * @param {?} weekStart
         * @return {?}
         */
        MonthsStrategyDirective.prototype.makePane = /**
         * @param {?} timestamp
         * @param {?} add
         * @param {?} baseOrder
         * @param {?} weekStart
         * @return {?}
         */
            function (timestamp, add, baseOrder, weekStart) {
                var /** @type {?} */ date = new Date(timestamp);
                date.setFullYear(add + date.getFullYear());
                var /** @type {?} */ values = [];
                for (var /** @type {?} */ i = 0; i < 12; i++) {
                    values.push(date.setMonth(i));
                }
                return {
                    order: baseOrder + add,
                    values: values,
                };
            };
        MonthsStrategyDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[skmMonthsStrategy]',
                        providers: [
                            { provide: ViewStrategy, useExisting: MonthsStrategyDirective },
                        ],
                    },] },
        ];
        return MonthsStrategyDirective;
    }(ViewStrategy));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var YearsStrategyDirective = (function (_super) {
        __extends(YearsStrategyDirective, _super);
        function YearsStrategyDirective() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.viewMode = ViewMode.Years;
            _this.itemClass = 'skm-datepicker-year';
            return _this;
        }
        /**
         * @param {?} timestamp
         * @return {?}
         */
        YearsStrategyDirective.prototype.normalizeTimestamp = /**
         * @param {?} timestamp
         * @return {?}
         */
            function (timestamp) {
                return new Date(timestamp).setMonth(0, 1);
            };
        /**
         * @param {?} timestamp
         * @return {?}
         */
        YearsStrategyDirective.prototype.makeInitPanesSeed = /**
         * @param {?} timestamp
         * @return {?}
         */
            function (timestamp) {
                var /** @type {?} */ date = new Date(timestamp);
                var /** @type {?} */ origin = date.getFullYear();
                var /** @type {?} */ adjusted = origin - (origin % 20);
                return startOfYear(date).setFullYear(adjusted);
            };
        /**
         * @param {?} timestamp
         * @param {?} add
         * @param {?} baseOrder
         * @param {?} weekStart
         * @return {?}
         */
        YearsStrategyDirective.prototype.makePane = /**
         * @param {?} timestamp
         * @param {?} add
         * @param {?} baseOrder
         * @param {?} weekStart
         * @return {?}
         */
            function (timestamp, add, baseOrder, weekStart) {
                var /** @type {?} */ date = new Date(timestamp);
                var /** @type {?} */ origin = add * 20 + date.getFullYear();
                var /** @type {?} */ values = [];
                for (var /** @type {?} */ i = 0; i < 20; i++) {
                    values.push(date.setFullYear(origin + i));
                }
                return {
                    order: baseOrder + add,
                    values: values,
                };
            };
        YearsStrategyDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[skmYearsStrategy]',
                        providers: [
                            { provide: ViewStrategy, useExisting: YearsStrategyDirective },
                        ],
                    },] },
        ];
        return YearsStrategyDirective;
    }(ViewStrategy));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DatepickerModule = (function () {
        function DatepickerModule() {
        }
        DatepickerModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                        ],
                        declarations: [
                            DatepickerComponent,
                            ViewComponent,
                            SliderComponent,
                            GridComponent,
                            DaysStrategyDirective,
                            MonthsStrategyDirective,
                            YearsStrategyDirective,
                        ],
                        exports: [
                            DatepickerComponent,
                        ],
                    },] },
        ];
        return DatepickerModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.DatepickerComponent = DatepickerComponent;
    exports.DatepickerModule = DatepickerModule;
    exports.ViewMode = ViewMode;
    exports.ɵf = GridComponent;
    exports.ɵe = slide;
    exports.ɵd = SliderComponent;
    exports.ɵb = zoom;
    exports.ɵg = DaysStrategyDirective;
    exports.ɵh = MonthsStrategyDirective;
    exports.ɵc = ViewStrategy;
    exports.ɵi = YearsStrategyDirective;
    exports.ɵa = ViewComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,