/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { WeekDay } from '@angular/common';
import { zoom } from '../util/zoom.animation';
import { ViewMode } from '../datepicker/view-mode';
import { ViewStrategy } from '../view-strategies/view-strategy';
var ViewComponent = /** @class */ (function () {
    function ViewComponent(viewStrategy) {
        this.viewStrategy = viewStrategy;
        this.itemChange = new EventEmitter();
        this.headerClick = new EventEmitter();
        this.ViewMode = ViewMode;
        this.prevDisabled = false;
        this.nextDisabled = false;
        this.regularTimestampFields = ['currentTimestamp', 'selectedTimestamp', 'minTimestamp', 'maxTimestamp'];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (this.viewStrategy.viewMode !== ViewMode.Days) {
            this.regularTimestampFields.forEach(function (field) {
                if (field in changes) {
                    _this[field] = _this[field] ? _this.viewStrategy.normalizeTimestamp(_this[field]) : undefined;
                }
            });
        }
        if ('initialTimestamp' in changes) {
            // Must be called after normalization of other timestamps for proper behavior of min-max range
            this.initPanes(this.initialTimestamp);
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ViewComponent.prototype.trackIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    /**
     * @param {?} notPanning
     * @return {?}
     */
    ViewComponent.prototype.clickHeader = /**
     * @param {?} notPanning
     * @return {?}
     */
    function (notPanning) {
        if (notPanning) {
            this.headerClick.emit(this.panes[this.visiblePaneIndex].values[0]);
        }
    };
    /**
     * @param {?} event
     * @param {?} pane
     * @param {?} notPanning
     * @return {?}
     */
    ViewComponent.prototype.selectItem = /**
     * @param {?} event
     * @param {?} pane
     * @param {?} notPanning
     * @return {?}
     */
    function (event, pane, notPanning) {
        if (notPanning) {
            var /** @type {?} */ button = /** @type {?} */ (event.target);
            var /** @type {?} */ index = button.dataset["index"];
            if (this.deselectEnabled && pane.values[index] === this.selectedTimestamp) {
                this.itemChange.emit(undefined);
            }
            else {
                this.itemChange.emit(pane.values[index]);
            }
        }
    };
    /**
     * @param {?} direction
     * @return {?}
     */
    ViewComponent.prototype.switchPanes = /**
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        this.visiblePaneIndex = (3 + this.visiblePaneIndex + direction) % 3;
        var /** @type {?} */ index = (3 + this.visiblePaneIndex + direction) % 3;
        var /** @type {?} */ pane = this.panes[index];
        this.panes[index] = this.viewStrategy.makePane(pane.values[0], 3 * direction, pane.order, this.weekStart);
        this.updateDisabledStatus((3 + this.visiblePaneIndex - 1) % 3, (3 + this.visiblePaneIndex + 1) % 3);
    };
    /**
     * @param {?} timestamp
     * @return {?}
     */
    ViewComponent.prototype.initPanes = /**
     * @param {?} timestamp
     * @return {?}
     */
    function (timestamp) {
        var _this = this;
        var /** @type {?} */ seed = this.viewStrategy.makeInitPanesSeed(timestamp);
        this.panes = [-1, 0, 1].map(function (i) { return _this.viewStrategy.makePane(seed, i, 0, _this.weekStart); });
        this.visiblePaneIndex = 1;
        this.updateDisabledStatus(0, 2);
    };
    /**
     * @param {?} prevIndex
     * @param {?} nextIndex
     * @return {?}
     */
    ViewComponent.prototype.updateDisabledStatus = /**
     * @param {?} prevIndex
     * @param {?} nextIndex
     * @return {?}
     */
    function (prevIndex, nextIndex) {
        this.prevDisabled = this.panes[prevIndex].values[this.panes[prevIndex].values.length - 1] < this.minTimestamp;
        this.nextDisabled = this.panes[nextIndex].values[0] > this.maxTimestamp;
    };
    ViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'skm-view',
                    template: "<skm-slider [prevDisabled]=\"prevDisabled\" [nextDisabled]=\"nextDisabled\" (slideDone)=\"switchPanes($event)\" #slider>\n  <div class=\"skm-datepicker-pane\" *ngFor=\"let pane of panes; trackBy: trackIndex\" [style.order]=\"pane.order\">\n    <button type=\"button\" class=\"skm-datepicker-header\"\n            (click)=\"clickHeader(slider.notPanning)\" [disabled]=\"viewStrategy.viewMode === ViewMode.Years\">\n      {{pane.values[0] | date:headingFormat}}\n      <ng-container *ngIf=\"viewStrategy.viewMode === ViewMode.Years\">\n        &ndash; {{pane.values[19] | date:headingFormat}}\n      </ng-container>\n    </button>\n    <div class=\"skm-datepicker-week\" *ngIf=\"viewStrategy.viewMode === ViewMode.Days\">\n      <div class=\"skm-datepicker-weekday\" *ngFor=\"let label of weekDayLabels | slice:weekStart:7\">{{label}}</div>\n      <div class=\"skm-datepicker-weekday\" *ngFor=\"let label of weekDayLabels | slice:0:weekStart\">{{label}}</div>\n    </div>\n    <skm-grid\n      [pane]=\"pane\"\n      [currentTimestamp]=\"currentTimestamp\"\n      [selectedTimestamp]=\"selectedTimestamp\"\n      [minTimestamp]=\"minTimestamp\"\n      [maxTimestamp]=\"maxTimestamp\"\n      [itemFormat]=\"itemFormat\"\n      [itemLabels]=\"itemLabels\"\n    ></skm-grid>\n  </div>\n</skm-slider>\n",
                    styles: ["button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}"],
                    animations: [zoom()],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    ViewComponent.ctorParameters = function () { return [
        { type: ViewStrategy, },
    ]; };
    ViewComponent.propDecorators = {
        "zoomDirection": [{ type: Input }, { type: HostBinding, args: ['@zoom',] },],
        "initialTimestamp": [{ type: Input },],
        "currentTimestamp": [{ type: Input },],
        "selectedTimestamp": [{ type: Input },],
        "minTimestamp": [{ type: Input },],
        "maxTimestamp": [{ type: Input },],
        "deselectEnabled": [{ type: Input },],
        "headingFormat": [{ type: Input },],
        "weekStart": [{ type: Input },],
        "weekDayLabels": [{ type: Input },],
        "itemFormat": [{ type: Input },],
        "itemLabels": [{ type: Input },],
        "itemChange": [{ type: Output },],
        "headerClick": [{ type: Output },],
    };
    return ViewComponent;
}());
export { ViewComponent };
function ViewComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    ViewComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    ViewComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    ViewComponent.propDecorators;
    /** @type {?} */
    ViewComponent.prototype.zoomDirection;
    /** @type {?} */
    ViewComponent.prototype.initialTimestamp;
    /** @type {?} */
    ViewComponent.prototype.currentTimestamp;
    /** @type {?} */
    ViewComponent.prototype.selectedTimestamp;
    /** @type {?} */
    ViewComponent.prototype.minTimestamp;
    /** @type {?} */
    ViewComponent.prototype.maxTimestamp;
    /** @type {?} */
    ViewComponent.prototype.deselectEnabled;
    /** @type {?} */
    ViewComponent.prototype.headingFormat;
    /** @type {?} */
    ViewComponent.prototype.weekStart;
    /** @type {?} */
    ViewComponent.prototype.weekDayLabels;
    /** @type {?} */
    ViewComponent.prototype.itemFormat;
    /** @type {?} */
    ViewComponent.prototype.itemLabels;
    /** @type {?} */
    ViewComponent.prototype.itemChange;
    /** @type {?} */
    ViewComponent.prototype.headerClick;
    /** @type {?} */
    ViewComponent.prototype.ViewMode;
    /** @type {?} */
    ViewComponent.prototype.panes;
    /** @type {?} */
    ViewComponent.prototype.prevDisabled;
    /** @type {?} */
    ViewComponent.prototype.nextDisabled;
    /** @type {?} */
    ViewComponent.prototype.visiblePaneIndex;
    /** @type {?} */
    ViewComponent.prototype.regularTimestampFields;
    /** @type {?} */
    ViewComponent.prototype.viewStrategy;
}

//# sourceMappingURL=data:application/json;base64,