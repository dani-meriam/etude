/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, LOCALE_ID, Output, } from '@angular/core';
import { FormStyle, getLocaleDayNames, TranslationWidth, WeekDay } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { isValidDate, noop, startOfDay } from '../util/helpers';
import { ViewMode } from './view-mode';
var DatepickerComponent = /** @class */ (function () {
    function DatepickerComponent(cd, locale) {
        this.cd = cd;
        this.locale = locale;
        this.dateChange = new EventEmitter();
        this.dayFormat = 'd';
        this.monthFormat = 'MMM';
        this.yearFormat = 'y';
        this.headingFormat = 'MMMM y';
        this.weekStart = WeekDay.Monday;
        this.view = ViewMode.Days;
        this.ViewMode = ViewMode;
        this.onChange = noop;
        this.onTouched = noop;
    }
    Object.defineProperty(DatepickerComponent.prototype, "date", {
        set: /**
         * @param {?} dirtyDate
         * @return {?}
         */
        function (dirtyDate) {
            if (dirtyDate == null) {
                this.selectedTimestamp = undefined;
                return;
            }
            var /** @type {?} */ date = startOfDay(dirtyDate);
            if (date.getTime() !== this.selectedTimestamp) {
                this.selectedTimestamp = isValidDate(date) ? date.getTime() : undefined;
                if (typeof this.selectedTimestamp !== 'undefined') {
                    this.initialTimestamp = this.selectedTimestamp;
                    this.view = ViewMode.Days;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerComponent.prototype, "min", {
        set: /**
         * @param {?} dirtyDate
         * @return {?}
         */
        function (dirtyDate) {
            var /** @type {?} */ date = startOfDay(dirtyDate);
            this.minTimestamp = isValidDate(date) ? date.valueOf() : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerComponent.prototype, "max", {
        set: /**
         * @param {?} dirtyDate
         * @return {?}
         */
        function (dirtyDate) {
            var /** @type {?} */ date = startOfDay(dirtyDate);
            this.maxTimestamp = isValidDate(date) ? date.valueOf() : undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    DatepickerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('weekDayLabels' in changes) {
            this.weekDayLabels = this.weekDayLabels || getLocaleDayNames(this.locale, FormStyle.Standalone, TranslationWidth.Abbreviated);
        }
    };
    /**
     * @return {?}
     */
    DatepickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.currentTimestamp = startOfDay(new Date()).getTime();
        this.initialTimestamp = this.selectedTimestamp || this.currentTimestamp;
        this.weekDayLabels = this.weekDayLabels || getLocaleDayNames(this.locale, FormStyle.Standalone, TranslationWidth.Abbreviated);
    };
    /**
     * @param {?} timestamp
     * @return {?}
     */
    DatepickerComponent.prototype.selectDay = /**
     * @param {?} timestamp
     * @return {?}
     */
    function (timestamp) {
        console.log(timestamp);
        this.selectedTimestamp = timestamp;
        var /** @type {?} */ date = (typeof timestamp !== 'undefined') ? new Date(timestamp) : undefined;
        this.onChange(date);
        this.dateChange.emit(date);
    };
    /**
     * @param {?} timestamp
     * @param {?} view
     * @param {?} direction
     * @return {?}
     */
    DatepickerComponent.prototype.switchView = /**
     * @param {?} timestamp
     * @param {?} view
     * @param {?} direction
     * @return {?}
     */
    function (timestamp, view, direction) {
        var _this = this;
        this.zoomDirection = direction;
        setTimeout(function () {
            _this.initialTimestamp = timestamp;
            _this.view = view;
            _this.cd.markForCheck();
        });
    };
    // ControlValueAccessor implementation
    /**
     * @param {?} obj
     * @return {?}
     */
    DatepickerComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.date = obj;
        this.cd.markForCheck();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatepickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatepickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
        // TODO implement
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    DatepickerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        // TODO implement
        this.cd.markForCheck();
    };
    DatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'skm-datepicker',
                    template: "<div class=\"skm-datepicker\" [ngSwitch]=\"view\">\n  <skm-view\n    *ngSwitchCase=\"ViewMode.Days\"\n    skmDaysStrategy\n    class=\"skm-datepicker-view skm-datepicker-days-view\"\n    [zoomDirection]=\"zoomDirection\"\n    [initialTimestamp]=\"initialTimestamp\"\n\n    [currentTimestamp]=\"currentTimestamp\"\n    [selectedTimestamp]=\"selectedTimestamp\"\n    [minTimestamp]=\"minTimestamp\"\n    [maxTimestamp]=\"maxTimestamp\"\n\n    [deselectEnabled]=\"deselectEnabled\"\n\n    [headingFormat]=\"headingFormat\"\n    [weekStart]=\"weekStart\"\n    [weekDayLabels]=\"weekDayLabels\"\n    [itemFormat]=\"dayFormat\"\n    [itemLabels]=\"dayLabels\"\n\n    (headerClick)=\"switchView($event, ViewMode.Months, 'out')\"\n    (itemChange)=\"selectDay($event)\"\n  ></skm-view>\n  <skm-view\n    *ngSwitchCase=\"ViewMode.Months\"\n    skmMonthsStrategy\n    class=\"skm-datepicker-view skm-datepicker-months-view\"\n    [zoomDirection]=\"zoomDirection\"\n    [initialTimestamp]=\"initialTimestamp\"\n\n    [currentTimestamp]=\"currentTimestamp\"\n    [selectedTimestamp]=\"selectedTimestamp\"\n    [minTimestamp]=\"minTimestamp\"\n    [maxTimestamp]=\"maxTimestamp\"\n\n    [headingFormat]=\"yearFormat\"\n    [itemFormat]=\"monthFormat\"\n    [itemLabels]=\"monthLabels\"\n\n    (headerClick)=\"switchView($event, ViewMode.Years, 'out')\"\n    (itemChange)=\"switchView($event, ViewMode.Days, 'in')\"\n  ></skm-view>\n  <skm-view\n    *ngSwitchCase=\"ViewMode.Years\"\n    skmYearsStrategy\n    class=\"skm-datepicker-view skm-datepicker-years-view\"\n    [zoomDirection]=\"zoomDirection\"\n    [initialTimestamp]=\"initialTimestamp\"\n\n    [currentTimestamp]=\"currentTimestamp\"\n    [selectedTimestamp]=\"selectedTimestamp\"\n    [minTimestamp]=\"minTimestamp\"\n    [maxTimestamp]=\"maxTimestamp\"\n\n    [headingFormat]=\"yearFormat\"\n    [itemFormat]=\"yearFormat\"\n\n    (itemChange)=\"switchView($event, ViewMode.Months, 'in')\"\n  ></skm-view>\n</div>\n",
                    styles: [".skm-datepicker{position:relative;overflow:hidden}.skm-datepicker-view{display:block;position:absolute;height:100%;width:100%}", "button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}"],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: NG_VALUE_ACCESSOR, useExisting: DatepickerComponent, multi: true },
                    ],
                },] },
    ];
    /** @nocollapse */
    DatepickerComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    DatepickerComponent.propDecorators = {
        "date": [{ type: Input },],
        "dateChange": [{ type: Output },],
        "min": [{ type: Input },],
        "max": [{ type: Input },],
        "deselectEnabled": [{ type: Input },],
        "dayFormat": [{ type: Input },],
        "monthFormat": [{ type: Input },],
        "yearFormat": [{ type: Input },],
        "headingFormat": [{ type: Input },],
        "weekStart": [{ type: Input },],
        "dayLabels": [{ type: Input },],
        "weekDayLabels": [{ type: Input },],
        "monthLabels": [{ type: Input },],
        "view": [{ type: Input },],
    };
    return DatepickerComponent;
}());
export { DatepickerComponent };
function DatepickerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    DatepickerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    DatepickerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    DatepickerComponent.propDecorators;
    /** @type {?} */
    DatepickerComponent.prototype.dateChange;
    /** @type {?} */
    DatepickerComponent.prototype.deselectEnabled;
    /** @type {?} */
    DatepickerComponent.prototype.dayFormat;
    /** @type {?} */
    DatepickerComponent.prototype.monthFormat;
    /** @type {?} */
    DatepickerComponent.prototype.yearFormat;
    /** @type {?} */
    DatepickerComponent.prototype.headingFormat;
    /** @type {?} */
    DatepickerComponent.prototype.weekStart;
    /** @type {?} */
    DatepickerComponent.prototype.dayLabels;
    /** @type {?} */
    DatepickerComponent.prototype.weekDayLabels;
    /** @type {?} */
    DatepickerComponent.prototype.monthLabels;
    /** @type {?} */
    DatepickerComponent.prototype.view;
    /** @type {?} */
    DatepickerComponent.prototype.initialTimestamp;
    /** @type {?} */
    DatepickerComponent.prototype.currentTimestamp;
    /** @type {?} */
    DatepickerComponent.prototype.selectedTimestamp;
    /** @type {?} */
    DatepickerComponent.prototype.minTimestamp;
    /** @type {?} */
    DatepickerComponent.prototype.maxTimestamp;
    /** @type {?} */
    DatepickerComponent.prototype.zoomDirection;
    /** @type {?} */
    DatepickerComponent.prototype.ViewMode;
    /** @type {?} */
    DatepickerComponent.prototype.onChange;
    /** @type {?} */
    DatepickerComponent.prototype.onTouched;
    /** @type {?} */
    DatepickerComponent.prototype.cd;
    /** @type {?} */
    DatepickerComponent.prototype.locale;
}

//# sourceMappingURL=data:application/json;base64,