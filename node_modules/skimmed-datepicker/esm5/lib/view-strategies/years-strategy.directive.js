/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive } from '@angular/core';
import { startOfYear } from '../util/helpers';
import { ViewStrategy } from './view-strategy';
import { ViewMode } from '../datepicker/view-mode';
var YearsStrategyDirective = /** @class */ (function (_super) {
    tslib_1.__extends(YearsStrategyDirective, _super);
    function YearsStrategyDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.viewMode = ViewMode.Years;
        _this.itemClass = 'skm-datepicker-year';
        return _this;
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    YearsStrategyDirective.prototype.normalizeTimestamp = /**
     * @param {?} timestamp
     * @return {?}
     */
    function (timestamp) {
        return new Date(timestamp).setMonth(0, 1);
    };
    /**
     * @param {?} timestamp
     * @return {?}
     */
    YearsStrategyDirective.prototype.makeInitPanesSeed = /**
     * @param {?} timestamp
     * @return {?}
     */
    function (timestamp) {
        var /** @type {?} */ date = new Date(timestamp);
        var /** @type {?} */ origin = date.getFullYear();
        var /** @type {?} */ adjusted = origin - (origin % 20);
        return startOfYear(date).setFullYear(adjusted);
    };
    /**
     * @param {?} timestamp
     * @param {?} add
     * @param {?} baseOrder
     * @param {?} weekStart
     * @return {?}
     */
    YearsStrategyDirective.prototype.makePane = /**
     * @param {?} timestamp
     * @param {?} add
     * @param {?} baseOrder
     * @param {?} weekStart
     * @return {?}
     */
    function (timestamp, add, baseOrder, weekStart) {
        var /** @type {?} */ date = new Date(timestamp);
        var /** @type {?} */ origin = add * 20 + date.getFullYear();
        var /** @type {?} */ values = [];
        for (var /** @type {?} */ i = 0; i < 20; i++) {
            values.push(date.setFullYear(origin + i));
        }
        return {
            order: baseOrder + add,
            values: values,
        };
    };
    YearsStrategyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[skmYearsStrategy]',
                    providers: [
                        { provide: ViewStrategy, useExisting: YearsStrategyDirective },
                    ],
                },] },
    ];
    return YearsStrategyDirective;
}(ViewStrategy));
export { YearsStrategyDirective };
function YearsStrategyDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    YearsStrategyDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    YearsStrategyDirective.ctorParameters;
    /** @type {?} */
    YearsStrategyDirective.prototype.viewMode;
    /** @type {?} */
    YearsStrategyDirective.prototype.itemClass;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVhcnMtc3RyYXRlZ3kuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2tpbW1lZC1kYXRlcGlja2VyLyIsInNvdXJjZXMiOlsibGliL3ZpZXctc3RyYXRlZ2llcy95ZWFycy1zdHJhdGVneS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDOztJQVNQLGtEQUFZOzs7eUJBQ2xDLFFBQVEsQ0FBQyxLQUFLOzBCQUNiLHFCQUFxQjs7Ozs7OztJQUUxQyxtREFBa0I7Ozs7SUFBbEIsVUFBbUIsU0FBaUI7UUFDbEMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDM0M7Ozs7O0lBRUQsa0RBQWlCOzs7O0lBQWpCLFVBQWtCLFNBQWlCO1FBQ2pDLHFCQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqQyxxQkFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xDLHFCQUFNLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDeEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDaEQ7Ozs7Ozs7O0lBRUQseUNBQVE7Ozs7Ozs7SUFBUixVQUFTLFNBQWlCLEVBQUUsR0FBVyxFQUFFLFNBQWlCLEVBQUUsU0FBa0I7UUFDNUUscUJBQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2pDLHFCQUFNLE1BQU0sR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUU3QyxxQkFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzQztRQUVELE1BQU0sQ0FBQztZQUNMLEtBQUssRUFBRSxTQUFTLEdBQUcsR0FBRztZQUN0QixNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUM7S0FDSDs7Z0JBbENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixTQUFTLEVBQUU7d0JBQ1QsRUFBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBQztxQkFDN0Q7aUJBQ0Y7O2lDQVpEO0VBYTRDLFlBQVk7U0FBM0Msc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBhbmUgfSBmcm9tICcuLi9wYW5lJztcclxuaW1wb3J0IHsgc3RhcnRPZlllYXIgfSBmcm9tICcuLi91dGlsL2hlbHBlcnMnO1xyXG5pbXBvcnQgeyBWaWV3U3RyYXRlZ3kgfSBmcm9tICcuL3ZpZXctc3RyYXRlZ3knO1xyXG5pbXBvcnQgeyBWaWV3TW9kZSB9IGZyb20gJy4uL2RhdGVwaWNrZXIvdmlldy1tb2RlJztcclxuaW1wb3J0IHsgV2Vla0RheSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tza21ZZWFyc1N0cmF0ZWd5XScsXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICB7cHJvdmlkZTogVmlld1N0cmF0ZWd5LCB1c2VFeGlzdGluZzogWWVhcnNTdHJhdGVneURpcmVjdGl2ZX0sXHJcbiAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFllYXJzU3RyYXRlZ3lEaXJlY3RpdmUgZXh0ZW5kcyBWaWV3U3RyYXRlZ3kge1xyXG4gIHJlYWRvbmx5IHZpZXdNb2RlID0gVmlld01vZGUuWWVhcnM7XHJcbiAgcmVhZG9ubHkgaXRlbUNsYXNzID0gJ3NrbS1kYXRlcGlja2VyLXllYXInO1xyXG5cclxuICBub3JtYWxpemVUaW1lc3RhbXAodGltZXN0YW1wOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCkuc2V0TW9udGgoMCwgMSk7XHJcbiAgfVxyXG5cclxuICBtYWtlSW5pdFBhbmVzU2VlZCh0aW1lc3RhbXA6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTtcclxuICAgIGNvbnN0IG9yaWdpbiA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgIGNvbnN0IGFkanVzdGVkID0gb3JpZ2luIC0gKG9yaWdpbiAlIDIwKTtcclxuICAgIHJldHVybiBzdGFydE9mWWVhcihkYXRlKS5zZXRGdWxsWWVhcihhZGp1c3RlZCk7XHJcbiAgfVxyXG5cclxuICBtYWtlUGFuZSh0aW1lc3RhbXA6IG51bWJlciwgYWRkOiBudW1iZXIsIGJhc2VPcmRlcjogbnVtYmVyLCB3ZWVrU3RhcnQ6IFdlZWtEYXkpOiBQYW5lIHtcclxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApO1xyXG4gICAgY29uc3Qgb3JpZ2luID0gYWRkICogMjAgKyBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcblxyXG4gICAgY29uc3QgdmFsdWVzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIwOyBpKyspIHtcclxuICAgICAgdmFsdWVzLnB1c2goZGF0ZS5zZXRGdWxsWWVhcihvcmlnaW4gKyBpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgb3JkZXI6IGJhc2VPcmRlciArIGFkZCxcclxuICAgICAgdmFsdWVzOiB2YWx1ZXMsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn1cclxuIl19