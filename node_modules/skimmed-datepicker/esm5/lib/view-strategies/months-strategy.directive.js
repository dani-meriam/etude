/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive } from '@angular/core';
import { startOfYear } from '../util/helpers';
import { ViewStrategy } from './view-strategy';
import { ViewMode } from '../datepicker/view-mode';
var MonthsStrategyDirective = /** @class */ (function (_super) {
    tslib_1.__extends(MonthsStrategyDirective, _super);
    function MonthsStrategyDirective() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.viewMode = ViewMode.Months;
        _this.itemClass = 'skm-datepicker-month';
        return _this;
    }
    /**
     * @param {?} timestamp
     * @return {?}
     */
    MonthsStrategyDirective.prototype.normalizeTimestamp = /**
     * @param {?} timestamp
     * @return {?}
     */
    function (timestamp) {
        return new Date(timestamp).setDate(1);
    };
    /**
     * @param {?} timestamp
     * @return {?}
     */
    MonthsStrategyDirective.prototype.makeInitPanesSeed = /**
     * @param {?} timestamp
     * @return {?}
     */
    function (timestamp) {
        return startOfYear(timestamp).valueOf();
    };
    /**
     * @param {?} timestamp
     * @param {?} add
     * @param {?} baseOrder
     * @param {?} weekStart
     * @return {?}
     */
    MonthsStrategyDirective.prototype.makePane = /**
     * @param {?} timestamp
     * @param {?} add
     * @param {?} baseOrder
     * @param {?} weekStart
     * @return {?}
     */
    function (timestamp, add, baseOrder, weekStart) {
        var /** @type {?} */ date = new Date(timestamp);
        date.setFullYear(add + date.getFullYear());
        var /** @type {?} */ values = [];
        for (var /** @type {?} */ i = 0; i < 12; i++) {
            values.push(date.setMonth(i));
        }
        return {
            order: baseOrder + add,
            values: values,
        };
    };
    MonthsStrategyDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[skmMonthsStrategy]',
                    providers: [
                        { provide: ViewStrategy, useExisting: MonthsStrategyDirective },
                    ],
                },] },
    ];
    return MonthsStrategyDirective;
}(ViewStrategy));
export { MonthsStrategyDirective };
function MonthsStrategyDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MonthsStrategyDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MonthsStrategyDirective.ctorParameters;
    /** @type {?} */
    MonthsStrategyDirective.prototype.viewMode;
    /** @type {?} */
    MonthsStrategyDirective.prototype.itemClass;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGhzLXN0cmF0ZWd5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3NraW1tZWQtZGF0ZXBpY2tlci8iLCJzb3VyY2VzIjpbImxpYi92aWV3LXN0cmF0ZWdpZXMvbW9udGhzLXN0cmF0ZWd5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0seUJBQXlCLENBQUM7O0lBU04sbURBQVk7Ozt5QkFDbkMsUUFBUSxDQUFDLE1BQU07MEJBQ2Qsc0JBQXNCOzs7Ozs7O0lBRTNDLG9EQUFrQjs7OztJQUFsQixVQUFtQixTQUFpQjtRQUNsQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3ZDOzs7OztJQUVELG1EQUFpQjs7OztJQUFqQixVQUFrQixTQUFpQjtRQUNqQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3pDOzs7Ozs7OztJQUVELDBDQUFROzs7Ozs7O0lBQVIsVUFBUyxTQUFpQixFQUFFLEdBQVcsRUFBRSxTQUFpQixFQUFFLFNBQWtCO1FBQzVFLHFCQUFNLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUUzQyxxQkFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9CO1FBRUQsTUFBTSxDQUFDO1lBQ0wsS0FBSyxFQUFFLFNBQVMsR0FBRyxHQUFHO1lBQ3RCLE1BQU0sRUFBRSxNQUFNO1NBQ2YsQ0FBQztLQUNIOztnQkEvQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFNBQVMsRUFBRTt3QkFDVCxFQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLHVCQUF1QixFQUFDO3FCQUM5RDtpQkFDRjs7a0NBWkQ7RUFhNkMsWUFBWTtTQUE1Qyx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUGFuZSB9IGZyb20gJy4uL3BhbmUnO1xyXG5pbXBvcnQgeyBzdGFydE9mWWVhciB9IGZyb20gJy4uL3V0aWwvaGVscGVycyc7XHJcbmltcG9ydCB7IFZpZXdTdHJhdGVneSB9IGZyb20gJy4vdmlldy1zdHJhdGVneSc7XHJcbmltcG9ydCB7IFZpZXdNb2RlIH0gZnJvbSAnLi4vZGF0ZXBpY2tlci92aWV3LW1vZGUnO1xyXG5pbXBvcnQgeyBXZWVrRGF5IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3NrbU1vbnRoc1N0cmF0ZWd5XScsXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICB7cHJvdmlkZTogVmlld1N0cmF0ZWd5LCB1c2VFeGlzdGluZzogTW9udGhzU3RyYXRlZ3lEaXJlY3RpdmV9LFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNb250aHNTdHJhdGVneURpcmVjdGl2ZSBleHRlbmRzIFZpZXdTdHJhdGVneSB7XHJcbiAgcmVhZG9ubHkgdmlld01vZGUgPSBWaWV3TW9kZS5Nb250aHM7XHJcbiAgcmVhZG9ubHkgaXRlbUNsYXNzID0gJ3NrbS1kYXRlcGlja2VyLW1vbnRoJztcclxuXHJcbiAgbm9ybWFsaXplVGltZXN0YW1wKHRpbWVzdGFtcDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXApLnNldERhdGUoMSk7XHJcbiAgfVxyXG5cclxuICBtYWtlSW5pdFBhbmVzU2VlZCh0aW1lc3RhbXA6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gc3RhcnRPZlllYXIodGltZXN0YW1wKS52YWx1ZU9mKCk7XHJcbiAgfVxyXG5cclxuICBtYWtlUGFuZSh0aW1lc3RhbXA6IG51bWJlciwgYWRkOiBudW1iZXIsIGJhc2VPcmRlcjogbnVtYmVyLCB3ZWVrU3RhcnQ6IFdlZWtEYXkpOiBQYW5lIHtcclxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXApO1xyXG4gICAgZGF0ZS5zZXRGdWxsWWVhcihhZGQgKyBkYXRlLmdldEZ1bGxZZWFyKCkpO1xyXG5cclxuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XHJcbiAgICAgIHZhbHVlcy5wdXNoKGRhdGUuc2V0TW9udGgoaSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIG9yZGVyOiBiYXNlT3JkZXIgKyBhZGQsXHJcbiAgICAgIHZhbHVlczogdmFsdWVzLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==