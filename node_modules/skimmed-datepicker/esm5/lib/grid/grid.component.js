/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';
import { SliderComponent } from '../slider/slider.component';
import { ViewStrategy } from '../view-strategies/view-strategy';
import { ViewComponent } from '../view/view.component';
var GridComponent = /** @class */ (function () {
    function GridComponent(slider, parentView, viewStrategy) {
        this.slider = slider;
        this.parentView = parentView;
        this.viewStrategy = viewStrategy;
        this.itemLabels = [];
        this._hostClass = 'skm-datepicker-content';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    GridComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('itemLabels' in changes) {
            this.itemLabels = this.itemLabels || [];
        }
    };
    /**
     * @param {?} index
     * @param {?} pane
     * @return {?}
     */
    GridComponent.prototype.makeItemClasses = /**
     * @param {?} index
     * @param {?} pane
     * @return {?}
     */
    function (index, pane) {
        return [
            this.viewStrategy.itemClass,
            'skm-datepicker-item',
            (pane.values[index] === this.currentTimestamp) ? 'skm-datepicker-current' : '',
            (pane.values[index] === this.selectedTimestamp) ? 'skm-datepicker-selected' : '',
        ].join(' ');
    };
    /**
     * @param {?} index
     * @param {?} pane
     * @return {?}
     */
    GridComponent.prototype.isDisabled = /**
     * @param {?} index
     * @param {?} pane
     * @return {?}
     */
    function (index, pane) {
        return (pane.values[index] < this.minTimestamp) || (pane.values[index] > this.maxTimestamp);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    GridComponent.prototype.trackIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return index;
    };
    GridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'skm-grid',
                    template: "<div class=\"skm-datepicker-grid\" (click)=\"parentView.selectItem($event, pane, slider.notPanning)\">\n  <div class=\"skm-datepicker-indent\" [style.width.%]=\"100 / 7 * pane.indent\"></div>\n  <div *ngFor=\"let value of pane.values; trackBy: trackIndex; let i = index\" class=\"skm-datepicker-cell\">\n    <button type=\"button\" [attr.data-index]=\"i\" [class]=\"makeItemClasses(i, pane)\" [disabled]=\"isDisabled(i, pane)\">\n      {{itemLabels[i] || (value | date:itemFormat)}}\n    </button>\n  </div>\n</div>\n",
                    styles: ["button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}"],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    GridComponent.ctorParameters = function () { return [
        { type: SliderComponent, },
        { type: ViewComponent, },
        { type: ViewStrategy, },
    ]; };
    GridComponent.propDecorators = {
        "pane": [{ type: Input },],
        "currentTimestamp": [{ type: Input },],
        "selectedTimestamp": [{ type: Input },],
        "minTimestamp": [{ type: Input },],
        "maxTimestamp": [{ type: Input },],
        "itemFormat": [{ type: Input },],
        "itemLabels": [{ type: Input },],
        "_hostClass": [{ type: HostBinding, args: ['class',] },],
    };
    return GridComponent;
}());
export { GridComponent };
function GridComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GridComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GridComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GridComponent.propDecorators;
    /** @type {?} */
    GridComponent.prototype.pane;
    /** @type {?} */
    GridComponent.prototype.currentTimestamp;
    /** @type {?} */
    GridComponent.prototype.selectedTimestamp;
    /** @type {?} */
    GridComponent.prototype.minTimestamp;
    /** @type {?} */
    GridComponent.prototype.maxTimestamp;
    /** @type {?} */
    GridComponent.prototype.itemFormat;
    /** @type {?} */
    GridComponent.prototype.itemLabels;
    /** @type {?} */
    GridComponent.prototype._hostClass;
    /** @type {?} */
    GridComponent.prototype.slider;
    /** @type {?} */
    GridComponent.prototype.parentView;
    /** @type {?} */
    GridComponent.prototype.viewStrategy;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9za2ltbWVkLWRhdGVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvZ3JpZC9ncmlkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUVqSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7SUE2QnJELHVCQUFxQixNQUF1QixFQUN2QixVQUF5QixFQUNqQjtRQUZSLFdBQU0sR0FBTixNQUFNLENBQWlCO1FBQ3ZCLGVBQVUsR0FBVixVQUFVLENBQWU7UUFDakIsaUJBQVksR0FBWixZQUFZOzBCQU5ULEVBQUU7MEJBRVUsd0JBQXdCO0tBS25FOzs7OztJQUVELG1DQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxFQUFFLENBQUMsQ0FBQyxZQUFZLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO1NBQ3pDO0tBQ0Y7Ozs7OztJQUVELHVDQUFlOzs7OztJQUFmLFVBQWdCLEtBQWEsRUFBRSxJQUFVO1FBQ3ZDLE1BQU0sQ0FBQztZQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUztZQUMzQixxQkFBcUI7WUFDckIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUM5RSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxFQUFFO1NBQ2pGLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2I7Ozs7OztJQUVELGtDQUFVOzs7OztJQUFWLFVBQVcsS0FBYSxFQUFFLElBQVU7UUFDbEMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUM3Rjs7Ozs7SUFFRCxrQ0FBVTs7OztJQUFWLFVBQVcsS0FBYTtRQUN0QixNQUFNLENBQUMsS0FBSyxDQUFDO0tBQ2Q7O2dCQXJERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFVBQVU7b0JBQ3BCLFFBQVEsRUFBRSx1Z0JBUVg7b0JBQ0MsTUFBTSxFQUFFLENBQUMsazFCQUFrMUIsQ0FBQztvQkFDNTFCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs7OztnQkFqQlEsZUFBZTtnQkFFZixhQUFhO2dCQURiLFlBQVk7Ozt5QkFrQmxCLEtBQUs7cUNBRUwsS0FBSztzQ0FDTCxLQUFLO2lDQUNMLEtBQUs7aUNBQ0wsS0FBSzsrQkFFTCxLQUFLOytCQUNMLEtBQUs7K0JBRUwsV0FBVyxTQUFDLE9BQU87O3dCQS9CdEI7O1NBb0JhLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQYW5lIH0gZnJvbSAnLi4vcGFuZSc7XHJcbmltcG9ydCB7IFNsaWRlckNvbXBvbmVudCB9IGZyb20gJy4uL3NsaWRlci9zbGlkZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgVmlld1N0cmF0ZWd5IH0gZnJvbSAnLi4vdmlldy1zdHJhdGVnaWVzL3ZpZXctc3RyYXRlZ3knO1xyXG5pbXBvcnQgeyBWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi4vdmlldy92aWV3LmNvbXBvbmVudCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3NrbS1ncmlkJyxcclxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJza20tZGF0ZXBpY2tlci1ncmlkXCIgKGNsaWNrKT1cInBhcmVudFZpZXcuc2VsZWN0SXRlbSgkZXZlbnQsIHBhbmUsIHNsaWRlci5ub3RQYW5uaW5nKVwiPlxyXG4gIDxkaXYgY2xhc3M9XCJza20tZGF0ZXBpY2tlci1pbmRlbnRcIiBbc3R5bGUud2lkdGguJV09XCIxMDAgLyA3ICogcGFuZS5pbmRlbnRcIj48L2Rpdj5cclxuICA8ZGl2ICpuZ0Zvcj1cImxldCB2YWx1ZSBvZiBwYW5lLnZhbHVlczsgdHJhY2tCeTogdHJhY2tJbmRleDsgbGV0IGkgPSBpbmRleFwiIGNsYXNzPVwic2ttLWRhdGVwaWNrZXItY2VsbFwiPlxyXG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgW2F0dHIuZGF0YS1pbmRleF09XCJpXCIgW2NsYXNzXT1cIm1ha2VJdGVtQ2xhc3NlcyhpLCBwYW5lKVwiIFtkaXNhYmxlZF09XCJpc0Rpc2FibGVkKGksIHBhbmUpXCI+XHJcbiAgICAgIHt7aXRlbUxhYmVsc1tpXSB8fCAodmFsdWUgfCBkYXRlOml0ZW1Gb3JtYXQpfX1cclxuICAgIDwvYnV0dG9uPlxyXG4gIDwvZGl2PlxyXG48L2Rpdj5cclxuYCxcclxuICBzdHlsZXM6IFtgYnV0dG9ue2Rpc3BsYXk6YmxvY2s7Y29sb3I6aW5oZXJpdH1idXR0b246bm90KFtkaXNhYmxlZF0pe2N1cnNvcjpwb2ludGVyfWJ1dHRvbltkaXNhYmxlZF17cG9pbnRlci1ldmVudHM6bm9uZX0uc2ttLWRhdGVwaWNrZXItcGFuZXtmbGV4LXNocmluazowO3dpZHRoOjEwMCU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtvdmVyZmxvdzpoaWRkZW59LnNrbS1kYXRlcGlja2VyLXdlZWt7ZGlzcGxheTpmbGV4fS5za20tZGF0ZXBpY2tlci13ZWVrZGF5e3dpZHRoOjE0LjI4NTcxJX0uc2ttLWRhdGVwaWNrZXItY29udGVudHtmbGV4OjEgMCAwO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LnNrbS1kYXRlcGlja2VyLWdyaWR7ZmxleDoxIDAgMDtkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7YWxpZ24tY29udGVudDpmbGV4LXN0YXJ0O3BvaW50ZXItZXZlbnRzOm5vbmV9LnNrbS1kYXRlcGlja2VyLWluZGVudHtoZWlnaHQ6MTYuNjY2NjclfS5za20tZGF0ZXBpY2tlci1jZWxse2Rpc3BsYXk6ZmxleH06aG9zdC1jb250ZXh0KC5za20tZGF0ZXBpY2tlci1kYXlzLXZpZXcpIC5za20tZGF0ZXBpY2tlci1jZWxse3dpZHRoOjE0LjI4NTcxJTtoZWlnaHQ6MTYuNjY2NjclfTpob3N0LWNvbnRleHQoLnNrbS1kYXRlcGlja2VyLW1vbnRocy12aWV3KSAuc2ttLWRhdGVwaWNrZXItY2VsbHt3aWR0aDozMy4zMzMzMyU7aGVpZ2h0OjI1JX06aG9zdC1jb250ZXh0KC5za20tZGF0ZXBpY2tlci15ZWFycy12aWV3KSAuc2ttLWRhdGVwaWNrZXItY2VsbHt3aWR0aDoyMCU7aGVpZ2h0OjI1JX0uc2ttLWRhdGVwaWNrZXItaXRlbXtmbGV4OjE7cG9pbnRlci1ldmVudHM6YXV0b31gXSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxufSlcclxuZXhwb3J0IGNsYXNzIEdyaWRDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gIEBJbnB1dCgpIHBhbmU6IFBhbmU7XHJcblxyXG4gIEBJbnB1dCgpIGN1cnJlbnRUaW1lc3RhbXA6IG51bWJlcjtcclxuICBASW5wdXQoKSBzZWxlY3RlZFRpbWVzdGFtcDogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIG1pblRpbWVzdGFtcDogbnVtYmVyO1xyXG4gIEBJbnB1dCgpIG1heFRpbWVzdGFtcDogbnVtYmVyO1xyXG5cclxuICBASW5wdXQoKSBpdGVtRm9ybWF0OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgaXRlbUxhYmVsczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIHJlYWRvbmx5IF9ob3N0Q2xhc3MgPSAnc2ttLWRhdGVwaWNrZXItY29udGVudCc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHNsaWRlcjogU2xpZGVyQ29tcG9uZW50LFxyXG4gICAgICAgICAgICAgIHJlYWRvbmx5IHBhcmVudFZpZXc6IFZpZXdDb21wb25lbnQsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSB2aWV3U3RyYXRlZ3k6IFZpZXdTdHJhdGVneSkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgaWYgKCdpdGVtTGFiZWxzJyBpbiBjaGFuZ2VzKSB7XHJcbiAgICAgIHRoaXMuaXRlbUxhYmVscyA9IHRoaXMuaXRlbUxhYmVscyB8fCBbXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1ha2VJdGVtQ2xhc3NlcyhpbmRleDogbnVtYmVyLCBwYW5lOiBQYW5lKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHRoaXMudmlld1N0cmF0ZWd5Lml0ZW1DbGFzcyxcclxuICAgICAgJ3NrbS1kYXRlcGlja2VyLWl0ZW0nLFxyXG4gICAgICAocGFuZS52YWx1ZXNbaW5kZXhdID09PSB0aGlzLmN1cnJlbnRUaW1lc3RhbXApID8gJ3NrbS1kYXRlcGlja2VyLWN1cnJlbnQnIDogJycsXHJcbiAgICAgIChwYW5lLnZhbHVlc1tpbmRleF0gPT09IHRoaXMuc2VsZWN0ZWRUaW1lc3RhbXApID8gJ3NrbS1kYXRlcGlja2VyLXNlbGVjdGVkJyA6ICcnLFxyXG4gICAgXS5qb2luKCcgJyk7XHJcbiAgfVxyXG5cclxuICBpc0Rpc2FibGVkKGluZGV4OiBudW1iZXIsIHBhbmU6IFBhbmUpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAocGFuZS52YWx1ZXNbaW5kZXhdIDwgdGhpcy5taW5UaW1lc3RhbXApIHx8IChwYW5lLnZhbHVlc1tpbmRleF0gPiB0aGlzLm1heFRpbWVzdGFtcCk7XHJcbiAgfVxyXG5cclxuICB0cmFja0luZGV4KGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIGluZGV4O1xyXG4gIH1cclxuXHJcbn1cclxuIl19