/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, NgZone, Output, } from '@angular/core';
import { createEaseOut } from '../util/helpers';
import { slide } from './slide.animation';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * @record
 */
export function AnimationTrigger() { }
function AnimationTrigger_tsickle_Closure_declarations() {
    /** @type {?} */
    AnimationTrigger.prototype.value;
    /** @type {?} */
    AnimationTrigger.prototype.params;
}
var SliderComponent = /** @class */ (function () {
    function SliderComponent(hostRef, cd, zone) {
        this.hostRef = hostRef;
        this.cd = cd;
        this.zone = zone;
        this.prevDisabled = false;
        this.nextDisabled = false;
        this.slideDone = new EventEmitter();
        this.notPanning = true;
        this.wrapperWidth = 1;
        this.panOffset = 0;
        this.ngUnsubscribe$ = new Subject();
        this.easeOut = createEaseOut(1.3);
        this.cd.detach();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    SliderComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.changeSlideTrigger();
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            var /** @type {?} */ host = _this.hostRef.nativeElement;
            fromEvent(host, 'mousedown').pipe(takeUntil(_this.ngUnsubscribe$)).subscribe(function () { return _this.startPress(); });
            if ('Hammer' in window) {
                var /** @type {?} */ hammer = new Hammer(host);
                fromEvent(hammer, 'panstart').pipe(takeUntil(_this.ngUnsubscribe$)).subscribe(function () { return _this.startPan(); });
                fromEvent(hammer, 'panmove').pipe(takeUntil(_this.ngUnsubscribe$)).subscribe(function (e) { return _this.pan(e); });
                fromEvent(hammer, 'panend pancancel').pipe(takeUntil(_this.ngUnsubscribe$)).subscribe(function () { return _this.endPan(); });
                fromEvent(hammer, 'swiperight').pipe(takeUntil(_this.ngUnsubscribe$)).subscribe(function () { return _this.swipe(-1); });
                fromEvent(hammer, 'swipeleft').pipe(takeUntil(_this.ngUnsubscribe$)).subscribe(function () { return _this.swipe(1); });
            }
        });
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SliderComponent.prototype.done = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.toState === this.lastDoneEventToState) {
            // workaround for https://github.com/angular/angular/issues/24084
            return;
        }
        this.lastDoneEventToState = event.toState;
        if (/** @type {?} */ (typeof event.toState) === 'number') {
            this.slideDone.emit(/** @type {?} */ (event.toState));
        }
    };
    /**
     * @param {?} direction
     * @return {?}
     */
    SliderComponent.prototype.slide = /**
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        var _this = this;
        this.changeSlideTrigger();
        setTimeout(function () { return _this.changeSlideTrigger(/** @type {?} */ (direction)); });
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.startPress = /**
     * @return {?}
     */
    function () {
        this.notPanning = true;
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.startPan = /**
     * @return {?}
     */
    function () {
        this.notPanning = false;
        this.wrapperWidth = this.hostRef.nativeElement.offsetWidth;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SliderComponent.prototype.pan = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var /** @type {?} */ multiplier = (event.deltaX > 0 && this.prevDisabled || event.deltaX < 0 && this.nextDisabled) ? 0.1 : 1;
        var /** @type {?} */ absOffset = Math.abs(event.deltaX / this.wrapperWidth);
        this.panOffset = Math.sign(event.deltaX) * this.easeOut(absOffset);
        this.changeSlideTrigger('panning', this.panOffset * multiplier);
    };
    /**
     * @return {?}
     */
    SliderComponent.prototype.endPan = /**
     * @return {?}
     */
    function () {
        if (Math.abs(this.panOffset) > 0.5) {
            this.changeSlideTrigger(/** @type {?} */ (-Math.sign(this.panOffset)));
        }
        else if (this.slideTrigger.value === 'panning') {
            this.changeSlideTrigger();
        }
    };
    /**
     * @param {?} direction
     * @return {?}
     */
    SliderComponent.prototype.swipe = /**
     * @param {?} direction
     * @return {?}
     */
    function (direction) {
        this.changeSlideTrigger(/** @type {?} */ (direction));
    };
    /**
     * @param {?=} value
     * @param {?=} offset
     * @return {?}
     */
    SliderComponent.prototype.changeSlideTrigger = /**
     * @param {?=} value
     * @param {?=} offset
     * @return {?}
     */
    function (value, offset) {
        if (value === void 0) { value = 'idle'; }
        if (offset === void 0) { offset = 0; }
        this.slideTrigger = {
            value: (value === -1 && this.prevDisabled || value === 1 && this.nextDisabled) ? 'idle' : value,
            params: { x: offset * 100 },
        };
        this.cd.detectChanges();
    };
    SliderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'skm-slider',
                    template: "<div class=\"skm-datepicker-slider\" [@slide]=\"slideTrigger\" (@slide.done)=\"done($event)\">\n  <ng-content></ng-content>\n</div>\n<button type=\"button\" class=\"skm-datepicker-pagination skm-prev\" (click)=\"slide(-1)\" [disabled]=\"prevDisabled\">&lsaquo;</button>\n<button type=\"button\" class=\"skm-datepicker-pagination skm-next\" (click)=\"slide(1)\" [disabled]=\"nextDisabled\">&rsaquo;</button>\n",
                    styles: [":host{display:block;position:relative;height:100%}.skm-datepicker-slider{display:flex;position:relative;left:-100%;height:100%}.skm-datepicker-pagination{position:absolute;top:0}.skm-datepicker-pagination.skm-prev{left:0}.skm-datepicker-pagination.skm-next{right:0}", "button{display:block;color:inherit}button:not([disabled]){cursor:pointer}button[disabled]{pointer-events:none}.skm-datepicker-pane{flex-shrink:0;width:100%;display:flex;flex-direction:column;overflow:hidden}.skm-datepicker-week{display:flex}.skm-datepicker-weekday{width:14.28571%}.skm-datepicker-content{flex:1 0 0;display:flex;flex-direction:column}.skm-datepicker-grid{flex:1 0 0;display:flex;flex-wrap:wrap;align-content:flex-start;pointer-events:none}.skm-datepicker-indent{height:16.66667%}.skm-datepicker-cell{display:flex}:host-context(.skm-datepicker-days-view) .skm-datepicker-cell{width:14.28571%;height:16.66667%}:host-context(.skm-datepicker-months-view) .skm-datepicker-cell{width:33.33333%;height:25%}:host-context(.skm-datepicker-years-view) .skm-datepicker-cell{width:20%;height:25%}.skm-datepicker-item{flex:1;pointer-events:auto}"],
                    animations: [slide()],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                },] },
    ];
    /** @nocollapse */
    SliderComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
        { type: NgZone, },
    ]; };
    SliderComponent.propDecorators = {
        "prevDisabled": [{ type: Input },],
        "nextDisabled": [{ type: Input },],
        "slideDone": [{ type: Output },],
    };
    return SliderComponent;
}());
export { SliderComponent };
function SliderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    SliderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    SliderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    SliderComponent.propDecorators;
    /** @type {?} */
    SliderComponent.prototype.prevDisabled;
    /** @type {?} */
    SliderComponent.prototype.nextDisabled;
    /** @type {?} */
    SliderComponent.prototype.slideDone;
    /** @type {?} */
    SliderComponent.prototype.notPanning;
    /** @type {?} */
    SliderComponent.prototype.slideTrigger;
    /** @type {?} */
    SliderComponent.prototype.wrapperWidth;
    /** @type {?} */
    SliderComponent.prototype.panOffset;
    /** @type {?} */
    SliderComponent.prototype.lastDoneEventToState;
    /** @type {?} */
    SliderComponent.prototype.ngUnsubscribe$;
    /** @type {?} */
    SliderComponent.prototype.easeOut;
    /** @type {?} */
    SliderComponent.prototype.hostRef;
    /** @type {?} */
    SliderComponent.prototype.cd;
    /** @type {?} */
    SliderComponent.prototype.zone;
}

//# sourceMappingURL=data:application/json;base64,